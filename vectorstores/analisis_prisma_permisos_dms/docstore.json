[[["aaefcf0b-af48-46a8-a795-5d953b6c9318",{"pageContent":"Análisis y Recomendaciones para la Gestión de Permisos\nJerárquicos en un Sistema de Gestión Documental\n1.​ Introducción:​","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":1,"to":3}}}}],["deafe63e-d8da-442a-9d5b-c35d966291a8",{"pageContent":"La gestión de permisos robusta y escalable en sistemas de gestión documental\nes fundamental para garantizar la seguridad de los datos y el cumplimiento\nnormativo. La introducción de permisos jerárquicos añade una capa de\ncomplejidad, requiriendo una consideración cuidadosa de la herencia y los\ndiferentes niveles de acceso. Una estructura de base de datos eficiente es\nesencial para asegurar el rendimiento, la escalabilidad y la mantenibilidad de la\ngestión de permisos y las funcionalidades de compartición. Esquemas mal\ndiseñados pueden conducir a consultas complejas, rendimiento lento y posibles\nvulnerabilidades de seguridad. El presente informe tiene como objetivo analizar\ncríticamente la estructura de base de datos actual, evaluar su idoneidad para los\nrequisitos especificados y proporcionar una recomendación bien justificada\nsobre el enfoque óptimo, incluyendo una guía práctica para su implementación.\n2.​ Análisis Crítico de la Estructura Actual de la Base de Datos:​","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":5,"to":17}}}}],["dcaeb917-1519-4f77-a24d-6c490a9c335e",{"pageContent":"sobre el enfoque óptimo, incluyendo una guía práctica para su implementación.\n2.​ Análisis Crítico de la Estructura Actual de la Base de Datos:​\nEl esquema actual de la base de datos consta de las tablas DocumentDMS,\nFolderDMS, EffectivePermission, Share y AccessLevel, cuyas relaciones son\ncruciales para comprender la gestión de permisos. Es fundamental entender las\ncolumnas de cada tabla y las relaciones que existen entre ellas, como las claves\nforáneas. La forma en que se relacionan los documentos y las carpetas, y si\nexiste una relación auto-referencial en FolderDMS para representar la jerarquía,\nson aspectos importantes a considerar. También es necesario analizar cómo se\nvinculan los permisos a los usuarios, documentos o carpetas y los niveles de\nacceso, así como el papel de la tabla Share en la concesión de acceso a otros\nusuarios. La presencia de la tabla EffectivePermission sugiere un cálculo previo o\nmaterialización de los permisos, por lo que es necesario comprender cómo se","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":16,"to":28}}}}],["8aa22b07-730b-41a0-92c5-08767f9910c9",{"pageContent":"usuarios. La presencia de la tabla EffectivePermission sugiere un cálculo previo o\nmaterialización de los permisos, por lo que es necesario comprender cómo se\npuebla y se mantiene esta tabla.​\nLas estrategias para la organización de archivos y carpetas a nivel de sistema de\narchivos enfatizan la importancia de las estructuras jerárquicas y las\nconvenciones de nomenclatura consistentes.1 Es probable que estas\nconsideraciones se reflejen en las tablas FolderDMS y DocumentDMS, aunque no\ndetallan directamente el aspecto de los permisos. Sistemas de gestión\ndocumental eficaces deben ofrecer control de acceso y privilegios de edición 7, lo\nque sugiere que el esquema actual probablemente tiene como objetivo soportar\nestas funcionalidades. La tabla 1 presenta una posible estructura para el\nesquema actual de la base de datos, aunque la estructura real puede variar.","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":27,"to":38}}}}],["e4dae360-bc6e-4c78-b7e7-6f43e3ad1790",{"pageContent":"Tabla\n\nColumna\n\nTipo de\nDatos\n\nClave\nPrimaria\n\nDocumentD\nMS\n\ndocument_id\n\nINTEGER\n\nSí\n\nfolder_id\n\nINTEGER\n\nname\n\nVARCHAR\n\nNombre del\ndocumento\n\n...\n\n...\n\nOtros\natributos del\ndocumento\n\nfolder_id\n\nINTEGER\n\nparent_folde\nr_id\n\nINTEGER\n\nname\n\nVARCHAR\n\nNombre de\nla carpeta\n\n...\n\n...\n\nOtros\natributos de\nla carpeta\n\neffective_per\nmission_id\n\nINTEGER\n\nFolderDMS\n\nEffectivePer\nmission\n\nClave\nForánea\n\nIdentificador\núnico del\ndocumento\nSí\n\nSí\n\nReferencia a\nla carpeta\nque contiene\nel\ndocumento\nen\nFolderDMS\n\nIdentificador\núnico de la\ncarpeta\nSí (a sí\nmismo)\n\nSí\n\nDescripción\n\nReferencia a\nla carpeta\npadre en\nFolderDMS\n(para la\njerarquía)\n\nIdentificador\núnico del\npermiso\n\n\fefectivo\n\nShare\n\nuser_id\n\nINTEGER\n\nReferencia al\nusuario\n\ndocument_id\n\nINTEGER\n\nSí\n\nReferencia al\ndocumento\nen\nDocumentD\nMS\n\nfolder_id\n\nINTEGER\n\nSí\n\nReferencia a\nla carpeta en\nFolderDMS\n\naccess_level\n_id\n\nINTEGER\n\nSí\n\nReferencia al\nnivel de\nacceso en\nAccessLevel\n(ej., lectura,\nescritura)\n\n...\n\n...\n\nshare_id\n\nINTEGER\n\ndocument_id","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":40,"to":206}}}}],["51d5693b-ef56-4f0f-8177-17a904a193ed",{"pageContent":"INTEGER\n\nSí\n\nReferencia a\nla carpeta en\nFolderDMS\n\naccess_level\n_id\n\nINTEGER\n\nSí\n\nReferencia al\nnivel de\nacceso en\nAccessLevel\n(ej., lectura,\nescritura)\n\n...\n\n...\n\nshare_id\n\nINTEGER\n\ndocument_id\n\nINTEGER\n\nSí\n\nReferencia al\ndocumento\ncompartido\nen\nDocumentD\nMS\n\nfolder_id\n\nINTEGER\n\nSí\n\nReferencia a\nla carpeta\ncompartida\nen\n\nOtros\natributos del\npermiso\nefectivo\nSí\n\nIdentificador\núnico del\nrecurso\ncompartido\n\n\fFolderDMS\n\nAccessLevel\n\nshared_with_\nuser_id\n\nINTEGER\n\nReferencia al\nusuario con\nel que se\ncomparte\n\naccess_level\n_id\n\nINTEGER\n\nshared_by_u\nser_id\n\nINTEGER\n\nReferencia al\nusuario que\ncompartió el\nrecurso\n\n...\n\n...\n\nOtros\natributos del\nrecurso\ncompartido\n(ej., fecha de\ncompartición\n)\n\naccess_level\n_id\n\nINTEGER\n\nname\n\nVARCHAR\n\nNombre del\nnivel de\nacceso (ej.,\nLectura,\nEscritura,\nEdición)\n\npermissions_\nmask\n\nINTEGER\n\nMáscara de\nbits o valor\nque\nrepresenta\n\nSí\n\nSí\n\nReferencia al\nnivel de\nacceso para\nel recurso\ncompartido\nen\nAccessLevel\n\nIdentificador\núnico del\nnivel de\nacceso","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":176,"to":323}}}}],["67523c77-b7a9-4cdf-b335-861bddc2d65c",{"pageContent":"permissions_\nmask\n\nINTEGER\n\nMáscara de\nbits o valor\nque\nrepresenta\n\nSí\n\nSí\n\nReferencia al\nnivel de\nacceso para\nel recurso\ncompartido\nen\nAccessLevel\n\nIdentificador\núnico del\nnivel de\nacceso\n\n\flos permisos\nespecíficos\nasociados a\neste nivel de\nacceso","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":298,"to":329}}}}],["9ad7802e-259d-4e5e-8d9a-4f566cc361aa",{"pageContent":"La idoneidad de la estructura actual para representar permisos jerárquicos multinivel\ndepende de cómo se gestiona la relación `parent_folder_id` en `FolderDMS` y cómo\nse utiliza la tabla `EffectivePermission` para aplicar estos permisos a través de la\njerarquía. La herencia de permisos, donde los permisos establecidos en una carpeta\nse propagan a sus subcarpetas y documentos, es un requisito fundamental.[9] La\nestructura actual debe implementar un mecanismo similar, posiblemente a través de\nla tabla `EffectivePermission` o mediante lógica de aplicación que consulte las\nrelaciones entre carpetas. La gestión de diferentes niveles de acceso (por ejemplo,\nlectura, escritura, eliminación) probablemente se maneja mediante la tabla\n`AccessLevel` y su columna `permissions_mask`, que permite definir granularmente\nlas acciones permitidas para cada nivel.​\n​\nSin embargo, la estructura actual podría presentar limitaciones para implementar","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":331,"to":343}}}}],["f3e6cc40-beda-461b-957a-f9fb57210b56",{"pageContent":"las acciones permitidas para cada nivel.​\n​\nSin embargo, la estructura actual podría presentar limitaciones para implementar\neficientemente la herencia de permisos a través de una jerarquía profunda de\ndocumentos y carpetas. Si `FolderDMS` utiliza un modelo de lista de adyacencia\n(donde cada carpeta simplemente apunta a su padre), la consulta de los permisos\nefectivos para un usuario en un elemento específico, considerando la herencia, podría\nrequerir consultas recursivas o múltiples uniones, lo que puede ser ineficiente para\njerarquías muy anidadas.[10, 11] Mantener la tabla `EffectivePermission` consistente\ncon los cambios en la jerarquía o los permisos explícitos también podría ser complejo\ny consumir muchos recursos, requiriendo la implementación de triggers o trabajos por\nlotes para asegurar la integridad de los datos. Además, es importante considerar\ncómo la estructura actual maneja las excepciones a los permisos heredados en\nniveles inferiores de la jerarquía.​\n​","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":341,"to":355}}}}],["87ac561e-e0be-4398-9cc0-e93169e2f704",{"pageContent":"lotes para asegurar la integridad de los datos. Además, es importante considerar\ncómo la estructura actual maneja las excepciones a los permisos heredados en\nniveles inferiores de la jerarquía.​\n​\nLa funcionalidad \"Compartido conmigo\" probablemente se implementa a través de la\ntabla `Share`, que registra los elementos que se han compartido con usuarios\nespecíficos. Esta tabla probablemente contiene referencias al documento o carpeta\ncompartida, al usuario con el que se comparte, al usuario que compartió el elemento\ny al nivel de acceso otorgado.[12, 13] La eficiencia de la consulta para obtener todos","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":352,"to":360}}}}],["f68e7b18-ecba-4e1c-ac5e-f4ac973caa09",{"pageContent":"los elementos compartidos con un usuario dependerá de la indexación y la estructura\nde la tabla `Share`, así como de las uniones necesarias con `DocumentDMS` y\n`FolderDMS`. Es posible que la estructura actual trate los elementos compartidos de\nmanera diferente a los elementos dentro de la jerarquía de carpetas del usuario, lo\nque podría generar inconsistencias en las comprobaciones de permisos o en la\nexperiencia del usuario.​\n3.​ Modelo Alternativo: Tabla de Cierre para Jerarquías:​","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":362,"to":368}}}}],["248fad24-30d7-41a6-a194-fb9f6f0250eb",{"pageContent":"El modelo de tabla de cierre es una solución eficaz para la gestión de datos\njerárquicos en bases de datos relacionales.10 Este modelo mantiene una tabla\nseparada que registra todas las relaciones ancestro-descendiente dentro de la\njerarquía. La tabla de cierre típicamente incluye columnas para el ID del ancestro,\nel ID del descendiente y, opcionalmente, la profundidad de la relación.​\nEl modelo de tabla de cierre representa todas las relaciones\nancestro-descendiente, incluyendo la profundidad, de la siguiente manera: para\ncada nodo en la jerarquía, la tabla de cierre almacena una fila donde el nodo es\ntanto el ancestro como el descendiente, con una profundidad de 0.20 Para cada\nrelación directa padre-hijo, se almacena una fila con una profundidad de 1. Las\nrelaciones transitivas, como abuelo-nieto, también se registran, con una\nprofundidad creciente que indica el número de niveles de separación. La tabla 2\nilustra un ejemplo de un esquema de tabla de cierre para la gestión de la","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":370,"to":382}}}}],["3930a822-14d4-41af-a1a7-dcefa4f9f972",{"pageContent":"profundidad creciente que indica el número de niveles de separación. La tabla 2\nilustra un ejemplo de un esquema de tabla de cierre para la gestión de la\njerarquía de carpetas.\nTabla","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":381,"to":384}}}}],["2099cef1-a3bf-495d-a2a7-95a276c8f645",{"pageContent":"Columna\n\nTipo de\nDatos\n\nClave\nPrimaria\n\nFolderDMS\n\nfolder_id\n\nINTEGER\n\nSí\n\nname\n\nVARCHAR\n\nNombre de\nla carpeta\n\n...\n\n...\n\nOtros\natributos de\nla carpeta\n\nancestor_id\n\nINTEGER\n\nFolderClosur\ne\n\nSí\n\nClave\nForánea\n\nDescripción\n\nIdentificador\núnico de la\ncarpeta\n\nFolderDMS\n(folder_id)\n\nID de la\ncarpeta\nancestro\n\n\fdescendant_\nid\n\nINTEGER\n\ndepth\n\nINTEGER\n\nSí\n\nFolderDMS\n(folder_id)\n\nID de la\ncarpeta\ndescendient\ne\nDistancia\nentre el\nancestro y el\ndescendient\ne (0 para el\nmismo nodo,\n1 para el hijo\ndirecto, etc.)","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":386,"to":467}}}}],["2780eabf-a6f8-4743-9d7e-ed7c53d835ba",{"pageContent":"El modelo de tabla de cierre ofrece varias ventajas en comparación con la estructura\nactual. Permite consultar de manera eficiente todos los ancestros o descendientes de\nun nodo con una sola unión.[10, 11] Determinar la profundidad de la jerarquía también\nes sencillo. La herencia de permisos podría simplificarse consultando la tabla de\ncierre para obtener todos los ancestros de un elemento y luego verificando los\npermisos asociados a esos ancestros. Sin embargo, el modelo de tabla de cierre\ntambién tiene desventajas. Requiere más espacio de almacenamiento debido a que se\nalmacenan todas las rutas. Las operaciones `INSERT` y `DELETE` son más complejas,\nya que requieren actualizaciones en la tabla de cierre. Además, podría ser necesario\nimplementar triggers para mantener automáticamente la tabla de cierre sincronizada\ncon los cambios en la jerarquía.[18, 20, 31] Es importante considerar que mover\nsubárboles (carpetas) podría ser más complejo con el modelo de tabla de cierre.[26]​","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":469,"to":480}}}}],["07035d52-d039-41ca-901d-ce9e4c116b06",{"pageContent":"con los cambios en la jerarquía.[18, 20, 31] Es importante considerar que mover\nsubárboles (carpetas) podría ser más complejo con el modelo de tabla de cierre.[26]​\n4.​ Recomendación y Justificación:​","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":479,"to":481}}}}],["bce759f9-6b94-4048-a591-a326d7b7691f",{"pageContent":"Basándonos en el análisis de la estructura actual y el modelo alternativo, se\nrecomienda cambiar completamente el enfoque y adoptar el modelo de tabla de\ncierre para la gestión de la jerarquía de carpetas y documentos, así como para la\nimplementación de la herencia de permisos. Si bien la estructura actual con una\ntabla de permisos efectivos puede ofrecer un buen rendimiento para ciertas\nconsultas, presenta desafíos significativos en la gestión de la herencia en\njerarquías profundas y en el mantenimiento de la consistencia de los datos.​\nEl modelo de tabla de cierre, aunque introduce una mayor complejidad en las\noperaciones de escritura (inserción, eliminación, movimiento de nodos), ofrece","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":483,"to":491}}}}],["c857cf6c-d354-4aae-ad7e-2be3f699747a",{"pageContent":"ventajas sustanciales en el rendimiento de las consultas necesarias para la\ngestión de permisos jerárquicos y la funcionalidad \"Compartido conmigo\". La\ncapacidad de consultar eficientemente todos los ancestros de un elemento\npermite implementar la herencia de permisos de manera más directa y con un\nmejor rendimiento, ya que se pueden determinar los permisos efectivos para un\nusuario en un elemento específico consultando los permisos asociados a todos\nsus ancestros en la jerarquía.​\nPara la funcionalidad \"Compartido conmigo\", aunque se seguiría necesitando una\ntabla Share para registrar los elementos compartidos con usuarios específicos, la\nverificación de los permisos efectivos para estos elementos podría beneficiarse\ndel modelo de tabla de cierre. Al considerar la jerarquía en la que reside un\nelemento compartido (si está dentro de una carpeta), se pueden aplicar las\nreglas de herencia de permisos definidas a través de la tabla de cierre.​","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":493,"to":505}}}}],["60ba0290-b014-4eea-b34f-15d500ff0643",{"pageContent":"elemento compartido (si está dentro de una carpeta), se pueden aplicar las\nreglas de herencia de permisos definidas a través de la tabla de cierre.​\nLa decisión de recomendar el modelo de tabla de cierre se basa en la\nimportancia de un rendimiento eficiente para las consultas de permisos en un\nsistema de gestión documental, donde las comprobaciones de acceso son una\noperación frecuente. Si bien la complejidad de las operaciones de escritura\naumenta, esta puede mitigarse mediante el uso de triggers a nivel de base de\ndatos que automaticen el mantenimiento de la tabla de cierre, asegurando la\nconsistencia de los datos y simplificando la lógica de la aplicación.\n5.​ Implementación en PostgreSQL:\n○​ Acceso a Datos:\n■​ Tabla de Cierre:\n■​ Para verificar los permisos de un usuario en un documento o carpeta\nespecífica utilizando el modelo de tabla de cierre, se realizaría una\nconsulta que una la tabla de cierre (FolderClosure o una tabla similar","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":504,"to":518}}}}],["ffebbcf4-72c9-434e-a841-052dfe51e1d1",{"pageContent":"específica utilizando el modelo de tabla de cierre, se realizaría una\nconsulta que una la tabla de cierre (FolderClosure o una tabla similar\npara documentos) con las tablas de usuarios, niveles de acceso y la\ntabla de nodos (FolderDMS o DocumentDMS). La consulta filtraría por\nel ID del usuario y el ID del elemento, considerando todos los\nancestros del elemento para determinar los permisos heredados. Por\nejemplo, para obtener los permisos de un usuario en una carpeta\nespecífica:​\nSQL​\nSELECT al.name​\nFROM FolderClosure fc​\nJOIN FolderDMS f ON fc.ancestor_id = f.folder_id​\nJOIN EffectivePermission ep ON f.folder_id = ep.folder_id​\nJOIN AccessLevel al ON ep.access_level_id = al.access_level_id​\nWHERE fc.descendant_id = <ID de la carpeta específica>​","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":517,"to":531}}}}],["94991b51-646f-4202-88fd-a247614056e4",{"pageContent":"AND ep.user_id = <ID del usuario>​\nUNION​\nSELECT al.name​\nFROM FolderDMS f​\nJOIN EffectivePermission ep ON f.folder_id = ep.folder_id​\nJOIN AccessLevel al ON ep.access_level_id = al.access_level_id​\nWHERE f.folder_id = <ID de la carpeta específica>​\nAND ep.user_id = <ID del usuario>;​\n\n■​ Para obtener todos los documentos y carpetas compartidos con un\n\nusuario, se consultaría la tabla Share y se uniría con DocumentDMS y\nFolderDMS. La verificación de los permisos efectivos para estos\nelementos podría entonces utilizar la tabla de cierre para considerar la\njerarquía:​\nSQL​\nSELECT d.name AS document_name, s.access_level_id​\nFROM Share s​\nJOIN DocumentDMS d ON s.document_id = d.document_id​\nWHERE s.shared_with_user_id = <ID del usuario>​\nUNION​\nSELECT f.name AS folder_name, s.access_level_id​\nFROM Share s​\nJOIN FolderDMS f ON s.folder_id = f.folder_id​\nWHERE s.shared_with_user_id = <ID del usuario>;​\n\n■​ Para consultar la jerarquía de carpetas y documentos, se uniría la","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":533,"to":559}}}}],["f2060a72-e6fa-45d2-b211-681421f425c6",{"pageContent":"■​ Para consultar la jerarquía de carpetas y documentos, se uniría la\n\ntabla de cierre con FolderDMS y DocumentDMS. Por ejemplo, para\nobtener toda la jerarquía de carpetas:​\nSQL​\nSELECT f.name AS descendant, p.name AS ancestor, fc.depth​\nFROM FolderClosure fc​\nJOIN FolderDMS f ON fc.descendant_id = f.folder_id​\nJOIN FolderDMS p ON fc.ancestor_id = p.folder_id​\nORDER BY fc.depth;​\n\n■​ Para consultar los permisos efectivos para un usuario en un elemento\n\nespecífico, considerando la herencia, se consultaría la tabla de cierre\npara todos los ancestros del elemento y se uniría con las tablas de\npermisos:​\nSQL​\n\n\fSELECT al.name​\nFROM FolderClosure fc​\nJOIN FolderDMS f ON fc.ancestor_id = f.folder_id​\nJOIN EffectivePermission ep ON f.folder_id = ep.folder_id​\nJOIN AccessLevel al ON ep.access_level_id = al.access_level_id​\nWHERE fc.descendant_id = <ID del elemento>​\nAND ep.user_id = <ID del usuario>​\nORDER BY fc.depth;​","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":559,"to":584}}}}],["56abf0b3-f5d9-42f9-9a1f-a20a504a525a",{"pageContent":"○​ Creación de Registros:\n■​ Tabla de Cierre:\n■​ Para crear un nuevo documento, se insertaría un registro en la tabla\n\nDocumentDMS con la información del documento.\n■​ Para crear una nueva carpeta, se insertaría un registro en la tabla\nFolderDMS con la información de la carpeta. Además, se deberían\ninsertar registros en la tabla de cierre (FolderClosure). Esto incluiría\nuna entrada auto-referencial (ancestor_id igual a descendant_id y\nprofundidad 0) y entradas para cada ancestro de la nueva carpeta. Si\nla nueva carpeta es hija de otra, se consultarían los ancestros de la\ncarpeta padre en la tabla de cierre y se insertarían nuevas filas para la\nnueva carpeta con esos ancestros y una profundidad incrementada en\n1. Por ejemplo, para insertar una nueva carpeta con ID new_folder_id\ncomo hija de una carpeta con ID parent_folder_id:​\nSQL​\n-- Insertar la nueva carpeta​\nINSERT INTO FolderDMS (folder_id, parent_folder_id, name) VALUES","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":586,"to":603}}}}],["317bdf2c-b491-4845-b4a6-bbc684d20f04",{"pageContent":"(<new_folder_id>, <parent_folder_id>, '<nombre de la nueva carpeta>');​\n​\n-- Insertar la entrada auto-referencial en la tabla de cierre​\nINSERT INTO FolderClosure (ancestor_id, descendant_id, depth) VALUES\n(<new_folder_id>, <new_folder_id>, 0);​\n​\n-- Insertar entradas para los ancestros (incluyendo el padre)​\nINSERT INTO FolderClosure (ancestor_id, descendant_id, depth)​\nSELECT ancestor_id, <new_folder_id>, depth + 1​\nFROM FolderClosure​\nWHERE descendant_id = <parent_folder_id>;​\n■​ Para crear un nuevo permiso, se insertaría un registro en la tabla\n\nEffectivePermission con el ID del usuario, el ID del documento o\n\n\fcarpeta y el ID del nivel de acceso.\n6.​ Integración con Prisma ORM:\n○​ Definición de Modelos de Prisma:\n■​ Para la estructura de base de datos con tabla de cierre, los modelos de\nPrisma correspondientes a las tablas DocumentDMS, FolderDMS,\nFolderClosure, EffectivePermission, Share y AccessLevel se definirían de\nla siguiente manera:​\nFragmento de código​","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":605,"to":627}}}}],["6c15e099-586f-4b2b-ae13-6a1acf765cfe",{"pageContent":"model DocumentDMS {​\nid\nInt\n@id @default(autoincrement())​\nfolderId Int​\nname\nString​\nfolder FolderDMS @relation(fields: [folderId], references: [id])​\neffectivePermissions EffectivePermission​\nshares\nShare​\n}​\n​\nmodel FolderDMS {​\nid\nInt\n@id @default(autoincrement())​\nparentFolderId Int?​\nname\nString​\ndocuments\nDocumentDMS​\nparentFolder FolderDMS? @relation(\"FolderHierarchy\", fields:\n[parentFolderId], references: [id], onDelete: Cascade, onUpdate:\nCascade)​\nchildFolders FolderDMS @relation(\"FolderHierarchy\")​\nancestorClosure FolderClosure @relation(\"Ancestor\")​\ndescendantClosure FolderClosure @relation(\"Descendant\")​\neffectivePermissions EffectivePermission​\nshares\nShare​\n}​\n​\nmodel FolderClosure {​\nancestorId Int​\ndescendantId Int​\ndepth\nInt​\nancestor FolderDMS @relation(\"Ancestor\", fields: [ancestorId],\nreferences: [id], onDelete: Cascade, onUpdate: Cascade)​\ndescendant FolderDMS @relation(\"Descendant\", fields: [descendantId],","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":629,"to":669}}}}],["80ddc17c-5ecd-42fc-8650-eff80002db2f",{"pageContent":"references: [id], onDelete: Cascade, onUpdate: Cascade)​\n​\n@@id([ancestorId, descendantId])​\n}​\n​\nmodel EffectivePermission {​\nid\nInt\n@id @default(autoincrement())​\nuserId\nInt​\ndocumentId Int?​\nfolderId\nInt?​\naccessLevelId Int​\ndocument\nDocumentDMS? @relation(fields: [documentId],\nreferences: [id], onDelete: Cascade, onUpdate: Cascade)​\nfolder\nFolderDMS? @relation(fields: [folderId], references: [id],\nonDelete: Cascade, onUpdate: Cascade)​\naccessLevel AccessLevel @relation(fields: [accessLevelId], references:\n[id], onDelete: Cascade, onUpdate: Cascade)​\n}​\n​\nmodel Share {​\nid\nInt\n@id @default(autoincrement())​\ndocumentId\nInt?​\nfolderId\nInt?​\nsharedWithUserId Int​\naccessLevelId\nInt​\nsharedByUserId Int​\ndocument\nDocumentDMS? @relation(fields: [documentId],\nreferences: [id], onDelete: Cascade, onUpdate: Cascade)​\nfolder\nFolderDMS? @relation(fields: [folderId], references: [id],\nonDelete: Cascade, onUpdate: Cascade)​\naccessLevel\nAccessLevel @relation(fields: [accessLevelId],","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":671,"to":715}}}}],["23a44b5b-5033-4b81-9010-01c80e99ab44",{"pageContent":"folder\nFolderDMS? @relation(fields: [folderId], references: [id],\nonDelete: Cascade, onUpdate: Cascade)​\naccessLevel\nAccessLevel @relation(fields: [accessLevelId],\nreferences: [id], onDelete: Cascade, onUpdate: Cascade)​\n}​\n​\nmodel AccessLevel {​\nid\nInt\n@id @default(autoincrement())​\nname\nString​\npermissionsMask Int​\neffectivePermissions EffectivePermission​","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":711,"to":726}}}}],["9fa0f81b-1990-49f9-b26b-7958c95ef15b",{"pageContent":"shares\n}​\n\nShare​\n\n○​ Uso del Cliente de Prisma para Consultas:\n■​ Para verificar los permisos de un usuario en una carpeta específica:​\nTypeScript​\nconst permissions = await prisma.folderClosure.findMany({​\nwhere: {​\ndescendantId: folderId,​\nancestor: {​\neffectivePermissions: {​\nsome: {​\nuserId: userId,​\nfolderId: { not: null },​\n\n},​\n},​\n},​\n},​\ninclude: {​\nancestor: {​\ninclude: {​\neffectivePermissions: {​\nwhere: { userId: userId },​\ninclude: { accessLevel: true },​\n\n},​\n},​\n},​\n},​\n});​\n■​ Para obtener todos los documentos y carpetas compartidos con un\nusuario:​\nTypeScript​\nconst sharedItems = await prisma.share.findMany({​\nwhere: { sharedWithUserId: userId },​\ninclude: { document: true, folder: true, accessLevel: true },​\n\n});​\n■​ Para consultar la jerarquía de carpetas:​\n\n\fTypeScript​\nconst folderHierarchy = await prisma.folderClosure.findMany({​\ninclude: {​\nancestor: { select: { id: true, name: true } },​\ndescendant: { select: { id: true, name: true } },​","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":728,"to":775}}}}],["ca945dd1-735b-4e86-9b63-23ea0735f2dc",{"pageContent":"TypeScript​\nconst folderHierarchy = await prisma.folderClosure.findMany({​\ninclude: {​\nancestor: { select: { id: true, name: true } },​\ndescendant: { select: { id: true, name: true } },​\n\n},​\norderBy: { depth: 'asc' },​\n\n});​\n■​ Para obtener los permisos efectivos para un usuario en una carpeta\nespecífica (simplificado):​\nTypeScript​\nconst effectivePermissions = await prisma.effectivePermission.findMany({​\nwhere: {​\nuserId: userId,​\nfolderId: folderId,​\n\n},​\ninclude: { accessLevel: true },​\n\n});​\n○​ Uso del Cliente de Prisma para Crear Registros:\n■​ Para crear una nueva carpeta:​\nTypeScript​\nconst newFolder = await prisma.folderDMS.create({​\ndata: {​\nname: folderName,​\nparentFolderId: parentFolderId,​\nancestorClosure: {​\ncreate: [​\n\n{ ancestorId: newFolderId, depth: 0 }, // Auto-referencia​\n//... (Lógica para crear entradas de ancestros basada en el parentFolderId)​","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":771,"to":804}}}}],["8d448862-4f8e-469e-ad30-0ecdaa1d7e45",{"pageContent":"{ ancestorId: newFolderId, depth: 0 }, // Auto-referencia​\n//... (Lógica para crear entradas de ancestros basada en el parentFolderId)​\n\n],​\n},​\n},​\n});​\n■​ Para crear un nuevo documento:​\nTypeScript​\nconst newDocument = await prisma.documentDMS.create({​\ndata: {​\n\n\fname: documentName,​\nfolderId: folderId,​\n\n},​\n});​\n■​ Para crear un nuevo permiso:​\nTypeScript​\nconst newPermission = await prisma.effectivePermission.create({​\ndata: {​\nuserId: userId,​\nfolderId: folderId,​\naccessLevelId: accessLevelId,​\n\n},​\n});​\n7.​ Conclusión:​","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":803,"to":830}}}}],["5a535b9a-6365-469b-8095-0597c834047b",{"pageContent":"},​\n});​\n7.​ Conclusión:​\n\nEl análisis presentado sugiere que la adopción del modelo de tabla de cierre para\nla gestión de la jerarquía de carpetas y documentos ofrece ventajas significativas\nen términos de rendimiento de consultas para la gestión de permisos jerárquicos\ny la funcionalidad \"Compartido conmigo\". Si bien este modelo introduce una\nmayor complejidad en las operaciones de escritura, los beneficios en la eficiencia\nde las consultas, especialmente en sistemas con jerarquías profundas y un alto\nvolumen de comprobaciones de permisos, justifican el cambio de enfoque. Se\nrecomienda realizar pruebas de rendimiento exhaustivas con volúmenes de datos\ny patrones de consulta realistas para validar los beneficios esperados. También\nse deben considerar el impacto de la migración en los datos existentes y la curva\nde aprendizaje para el equipo con respecto al nuevo modelo.\nObras citadas\n1.​ Organize your files | Data management - MIT Libraries, fecha de acceso: abril 16,","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":828,"to":844}}}}],["29f17eeb-7f6d-4dfc-99ce-21952f904685",{"pageContent":"2025, https://libraries.mit.edu/data-management/store/organize/\n\n2.​ Directory Structure - Harvard Biomedical Data Management, fecha de acceso:\n\nabril 16, 2025,\nhttps://datamanagement.hms.harvard.edu/plan-design/directory-structure\n3.​ Designing a data file structure - CESSDA Data Management Expert Guide, fecha\nde acceso: abril 16, 2025,\nhttps://dmeg.cessda.eu/Data-Management-Expert-Guide/2.-Organise-Documen\nt/Designing-a-data-file-structure\n4.​ File naming and folder structure - CESSDA Data Management Expert Guide,\nfecha de acceso: abril 16, 2025,","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":846,"to":857}}}}],["4d9095c4-9939-43ce-9138-689dff145e53",{"pageContent":"https://dmeg.cessda.eu/Data-Management-Expert-Guide/2.-Organise-Documen\nt/File-naming-and-folder-structure\n5.​ File and Folder Organization - long draft - UC Merced Library, fecha de acceso:\nabril 16, 2025, https://library.ucmerced.edu/node/66751\n6.​ The Guide to Folder Structures - SuiteFiles, fecha de acceso: abril 16, 2025,\nhttps://www.suitefiles.com/guides/folder-structures-guide/\n7.​ Collaborative Document Management - Interfacing Technologies, fecha de\nacceso: abril 16, 2025,\nhttps://interfacing.com/collaborative-document-management\n8.​ What is a Document Management System? - IRIS Software Group, fecha de\nacceso: abril 16, 2025,\nhttps://www.irisglobal.com/blog/what-is-a-document-management-system/\n9.​ Understanding Permission Inheritance - Seeq Knowledge Base, fecha de acceso:\nabril 16, 2025,\nhttps://support.seeq.com/kb/R64/cloud/understanding-permission-inheritance\n10.​Hierarchical models in PostgreSQL | Ackee blog, fecha de acceso: abril 16, 2025,","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":859,"to":874}}}}],["551c494c-b91d-4a2e-ac7a-fc739eeb818f",{"pageContent":"abril 16, 2025,\nhttps://support.seeq.com/kb/R64/cloud/understanding-permission-inheritance\n10.​Hierarchical models in PostgreSQL | Ackee blog, fecha de acceso: abril 16, 2025,\nhttps://www.ackee.agency/blog/hierarchical-models-in-postgresql\n11.​ Closure Table | The Cache • Fueled Engineering, fecha de acceso: abril 16, 2025,\nhttps://fueled.com/the-cache/posts/backend/closure-table/\n12.​Database design for file sharing system like Google drive : r/AskProgramming Reddit, fecha de acceso: abril 16, 2025,\nhttps://www.reddit.com/r/AskProgramming/comments/1g3msfs/database_design\n_for_file_sharing_system_like/\n13.​How to design a functionality to share content? - Software Engineering Stack\nExchange, fecha de acceso: abril 16, 2025,\nhttps://softwareengineering.stackexchange.com/questions/348606/how-to-desig\nn-a-functionality-to-share-content\n14.​SQL Server Closure Tables - Simple Talk - Redgate Software, fecha de acceso:\nabril 16, 2025,","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":872,"to":886}}}}],["6f0e49f9-cf46-428b-95eb-11fee26ef51a",{"pageContent":"n-a-functionality-to-share-content\n14.​SQL Server Closure Tables - Simple Talk - Redgate Software, fecha de acceso:\nabril 16, 2025,\nhttps://www.red-gate.com/simple-talk/databases/sql-server/t-sql-programmingsql-server/sql-server-closure-tables/\n15.​Recursive CTE vs closure table for storing hierarchical information : r/PostgreSQL\n- Reddit, fecha de acceso: abril 16, 2025,\nhttps://www.reddit.com/r/PostgreSQL/comments/1777s0t/recursive_cte_vs_closu\nre_table_for_storing/\n16.​Transitive Closure in PostgreSQL - Remind Engineering, fecha de acceso: abril 16,\n2025, https://engineering.remind.com/Transitive-Closure-In-PostgreSQL/\n17.​franzose/ClosureTable: Adjacency List'ed Closure Table database design pattern\nimplementation for the Laravel framework. - GitHub, fecha de acceso: abril 16,\n2025, https://github.com/franzose/ClosureTable\n18.​This is a mysql and postgresql store procedure and trigger implementation of\nclosure table in RDBMS about hierarchy data model. - GitHub, fecha de acceso:","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":884,"to":898}}}}],["e9d2b4d3-483e-41d3-8d56-8bc72d46bcd2",{"pageContent":"18.​This is a mysql and postgresql store procedure and trigger implementation of\nclosure table in RDBMS about hierarchy data model. - GitHub, fecha de acceso:\nabril 16, 2025, https://github.com/developerworks/hierarchy-data-closure-table\n19.​The relational modeling of hierarchical data in biodiversity databases - Oxford\nAcademic, fecha de acceso: abril 16, 2025,","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":897,"to":901}}}}],["dd5ef2a8-cded-4967-be30-531cca3fe44a",{"pageContent":"https://academic.oup.com/database/article/doi/10.1093/database/baae107/781784\n3\n20.​Store Hierarchical Data Seamlessly | PostgreSQL - Closure Table, fecha de\nacceso: abril 16, 2025,\nhttps://technobytz.com/closure_table_store_hierarchical_data.html\n21.​WillSoss/closure-tree: A closure table implementation in C#/MSSQL. - GitHub,\nfecha de acceso: abril 16, 2025, https://github.com/WillSoss/closure-tree\n22.​Choice of Database schema for storing folder system - Stack Overflow, fecha de\nacceso: abril 16, 2025,\nhttps://stackoverflow.com/questions/13104601/choice-of-database-schema-forstoring-folder-system\n23.​Moving Subtrees in Closure Table Hierarchies - Percona, fecha de acceso: abril 16,\n2025, https://www.percona.com/blog/moving-subtrees-in-closure-table/\n24.​The simplest(?) way to do tree-based queries in SQL - dirtSimple.org, fecha de\nacceso: abril 16, 2025,\nhttps://dirtsimple.org/2010/11/simplest-way-to-do-tree-based-queries.html","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":903,"to":917}}}}],["a6efb48f-f804-415f-8d5f-fb936c8e4b31",{"pageContent":"24.​The simplest(?) way to do tree-based queries in SQL - dirtSimple.org, fecha de\nacceso: abril 16, 2025,\nhttps://dirtsimple.org/2010/11/simplest-way-to-do-tree-based-queries.html\n25.​How can I create a closure table using data from an adjacency list? - Stack\nOverflow, fecha de acceso: abril 16, 2025,\nhttps://stackoverflow.com/questions/12621873/how-can-i-create-a-closure-table\n-using-data-from-an-adjacency-list\n26.​Rendering Trees with Closure Tables – Keeping It Simple - Karwin, fecha de\nacceso: abril 16, 2025,\nhttps://karwin.com/blog/index.php/2010/03/24/rendering-trees-with-closure-tabl\nes/\n27.​Hierarchical Structures in PostgreSQL (2020) - Hacker News, fecha de acceso:\nabril 16, 2025, https://news.ycombinator.com/item?id=27631765\n28.​Working with Graphs in Postgres Part 2: Extending the Closure Table Pattern to\nSupport DAGs - Lucas Nagle, fecha de acceso: abril 16, 2025,\nhttps://lnagle.github.io/extended-closure-table-pattern.html","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":915,"to":930}}}}],["c187f7e5-070e-4ef5-a6e4-bbc12d9f8886",{"pageContent":"Support DAGs - Lucas Nagle, fecha de acceso: abril 16, 2025,\nhttps://lnagle.github.io/extended-closure-table-pattern.html\n29.​data modeling - Managing hierarchies in SQL: MPTT/nested sets vs ..., fecha de\nacceso: abril 16, 2025,\nhttps://stackoverflow.com/questions/8196175/managing-hierarchies-in-sql-mpttnested-sets-vs-adjacency-lists-vs-storing-path\n30.​Moving in Closure Table with Multiple Parents - sql - Stack Overflow, fecha de\nacceso: abril 16, 2025,\nhttps://stackoverflow.com/questions/9641932/moving-in-closure-table-with-multi\nple-parents\n31.​Hierarchical data using closure table, how to ensure that a column is unique within\nthe parent node? - DBA Stack Exchange, fecha de acceso: abril 16, 2025,\nhttps://dba.stackexchange.com/questions/269404/hierarchical-data-using-closur\ne-table-how-to-ensure-that-a-column-is-unique-wit\n32.​Implementing version history with a closure table schema - Stack Overflow, fecha\nde acceso: abril 16, 2025,","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":929,"to":943}}}}],["501cb161-3ff2-4028-80cc-15fe7d85370d",{"pageContent":"e-table-how-to-ensure-that-a-column-is-unique-wit\n32.​Implementing version history with a closure table schema - Stack Overflow, fecha\nde acceso: abril 16, 2025,\nhttps://stackoverflow.com/questions/13457479/implementing-version-history-wit\nh-a-closure-table-schema","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":941,"to":945}}}}],["73e1beba-b278-441e-99ef-1db39cd1d67c",{"pageContent":"33.​Worked example of closure tables with from and thru dates - DBA Stack","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":947,"to":947}}}}],["f53224af-3bbc-46ca-8da3-cd071162acd3",{"pageContent":"Exchange, fecha de acceso: abril 16, 2025,\nhttps://dba.stackexchange.com/questions/230966/worked-example-of-closure-t\nables-with-from-and-thru-dates\n34.​Use closure tables to implement file cache without full path column · Issue #4209\n· owncloud/core - GitHub, fecha de acceso: abril 16, 2025,\nhttps://github.com/owncloud/core/issues/4209\n35.​When inserting why does a closure table point to itself - Stack Overflow, fecha de\nacceso: abril 16, 2025,\nhttps://stackoverflow.com/questions/22416571/when-inserting-why-does-a-closu\nre-table-point-to-itself\n36.​hierarchical data in a database: recursive query vs. closure tables vs. graph\ndatabase, fecha de acceso: abril 16, 2025,\nhttps://stackoverflow.com/questions/7497812/hierarchical-data-in-a-database-re\ncursive-query-vs-closure-tables-vs-graph-da\n37.​How to Store and Query Categories : r/PHP - Reddit, fecha de acceso: abril 16,\n2025,\nhttps://www.reddit.com/r/PHP/comments/l72ve8/how_to_store_and_query_categ\nories/","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":949,"to":966}}}}],["46451c97-78e2-4176-90a1-3beda20555b4",{"pageContent":"37.​How to Store and Query Categories : r/PHP - Reddit, fecha de acceso: abril 16,\n2025,\nhttps://www.reddit.com/r/PHP/comments/l72ve8/how_to_store_and_query_categ\nories/\n38.​How would you model a file tree? : r/SQL - Reddit, fecha de acceso: abril 16, 2025,\nhttps://www.reddit.com/r/SQL/comments/rt3d9a/how_would_you_model_a_file_tr\nee/\n39.​Nested Sets vs Closure Table in real life apps : r/PHP - Reddit, fecha de acceso:\nabril 16, 2025,\nhttps://www.reddit.com/r/PHP/comments/3mgomv/nested_sets_vs_closure_table_\nin_real_life_apps/","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":963,"to":973}}}}],["d242290e-699f-44c4-81e3-c0c533f31ff4",{"pageContent":"Este analisis fue realizado por Aaron Santander","metadata":{"source":"docs\\analisis_prisma_permisos_dms.txt","loc":{"lines":{"from":977,"to":977}}}}]],{"0":"aaefcf0b-af48-46a8-a795-5d953b6c9318","1":"deafe63e-d8da-442a-9d5b-c35d966291a8","2":"dcaeb917-1519-4f77-a24d-6c490a9c335e","3":"8aa22b07-730b-41a0-92c5-08767f9910c9","4":"e4dae360-bc6e-4c78-b7e7-6f43e3ad1790","5":"51d5693b-ef56-4f0f-8177-17a904a193ed","6":"67523c77-b7a9-4cdf-b335-861bddc2d65c","7":"9ad7802e-259d-4e5e-8d9a-4f566cc361aa","8":"f3e6cc40-beda-461b-957a-f9fb57210b56","9":"87ac561e-e0be-4398-9cc0-e93169e2f704","10":"f68e7b18-ecba-4e1c-ac5e-f4ac973caa09","11":"248fad24-30d7-41a6-a194-fb9f6f0250eb","12":"3930a822-14d4-41af-a1a7-dcefa4f9f972","13":"2099cef1-a3bf-495d-a2a7-95a276c8f645","14":"2780eabf-a6f8-4743-9d7e-ed7c53d835ba","15":"07035d52-d039-41ca-901d-ce9e4c116b06","16":"bce759f9-6b94-4048-a591-a326d7b7691f","17":"c857cf6c-d354-4aae-ad7e-2be3f699747a","18":"60ba0290-b014-4eea-b34f-15d500ff0643","19":"ffebbcf4-72c9-434e-a841-052dfe51e1d1","20":"94991b51-646f-4202-88fd-a247614056e4","21":"f2060a72-e6fa-45d2-b211-681421f425c6","22":"56abf0b3-f5d9-42f9-9a1f-a20a504a525a","23":"317bdf2c-b491-4845-b4a6-bbc684d20f04","24":"6c15e099-586f-4b2b-ae13-6a1acf765cfe","25":"80ddc17c-5ecd-42fc-8650-eff80002db2f","26":"23a44b5b-5033-4b81-9010-01c80e99ab44","27":"9fa0f81b-1990-49f9-b26b-7958c95ef15b","28":"ca945dd1-735b-4e86-9b63-23ea0735f2dc","29":"8d448862-4f8e-469e-ad30-0ecdaa1d7e45","30":"5a535b9a-6365-469b-8095-0597c834047b","31":"29f17eeb-7f6d-4dfc-99ce-21952f904685","32":"4d9095c4-9939-43ce-9138-689dff145e53","33":"551c494c-b91d-4a2e-ac7a-fc739eeb818f","34":"6f0e49f9-cf46-428b-95eb-11fee26ef51a","35":"e9d2b4d3-483e-41d3-8d56-8bc72d46bcd2","36":"dd5ef2a8-cded-4967-be30-531cca3fe44a","37":"a6efb48f-f804-415f-8d5f-fb936c8e4b31","38":"c187f7e5-070e-4ef5-a6e4-bbc12d9f8886","39":"501cb161-3ff2-4028-80cc-15fe7d85370d","40":"73e1beba-b278-441e-99ef-1db39cd1d67c","41":"f53224af-3bbc-46ca-8da3-cd071162acd3","42":"46451c97-78e2-4176-90a1-3beda20555b4","43":"d242290e-699f-44c4-81e3-c0c533f31ff4"}]