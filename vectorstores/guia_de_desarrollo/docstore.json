[[["4ded05cf-5020-4bb0-83ef-64712237a855",{"pageContent":"# Guía de Desarrollo\r\n\r\nEsta guía está diseñada para desarrolladores que trabajan en el sistema de gestión de documentos frontend. Proporciona información sobre las convenciones, mejores prácticas y flujos de trabajo establecidos para el proyecto.\r\n\r\n## Configuración del Entorno de Desarrollo\r\n\r\nPara garantizar un entorno de desarrollo coherente, todos los desarrolladores deben seguir estas configuraciones:\r\n\r\n### Editor y Extensiones Recomendadas\r\n\r\nRecomendamos usar Visual Studio Code con las siguientes extensiones:\r\n\r\n- ESLint\r\n- Prettier - Code formatter\r\n- Tailwind CSS IntelliSense\r\n- TypeScript React code snippets\r\n\r\n### Configuración de VSCode\r\n\r\nConfigura tu editor con estos ajustes para mantener la consistencia:\r\n\r\n````json\r\n{\r\n  \"editor.formatOnSave\": true,\r\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\r\n  \"editor.codeActionsOnSave\": {\r\n    \"source.fixAll.eslint\": true\r\n  },\r\n  \"[typescript][typescriptreact]\": {","metadata":{"source":"docs\\guia_de_desarrollo.txt","loc":{"lines":{"from":1,"to":29}}}}],["0d8560ff-db8e-4bf4-8295-f3c93ce96908",{"pageContent":"\"editor.formatOnSave\": true,\r\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\r\n  \"editor.codeActionsOnSave\": {\r\n    \"source.fixAll.eslint\": true\r\n  },\r\n  \"[typescript][typescriptreact]\": {\r\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\r\n  }\r\n}\r\n````\r\n\r\n## Convenciones de Código\r\n\r\nSeguimos un conjunto específico de convenciones de código para mantener la coherencia y calidad:\r\n\r\n### TypeScript\r\n\r\n- Usar tipado estricto para todas las variables, funciones y componentes.\r\n- `Evitar el uso de any. Preferir unknown` cuando sea necesario.\r\n- Definir interfaces para todos los props de componentes.\r\n- Utilizar tipos descriptivos para las funciones.\r\n\r\n### React y Componentes\r\n\r\n- Usar componentes funcionales con hooks en lugar de componentes de clase.\r\n- Seguir el patrón Atomic Design para la organización de componentes.\r\n- `Evitar efectos secundarios innecesarios. Utilizar useEffect` con precaución.","metadata":{"source":"docs\\guia_de_desarrollo.txt","loc":{"lines":{"from":24,"to":50}}}}],["ae1dace0-34da-47bd-8960-8ac21ff81cad",{"pageContent":"- Seguir el patrón Atomic Design para la organización de componentes.\r\n- `Evitar efectos secundarios innecesarios. Utilizar useEffect` con precaución.\r\n- `Implementar memorización (useMemo, useCallback`) para componentes costosos o funciones.\r\n\r\n### Estructura de Componentes\r\n\r\nTodos los componentes deben seguir esta estructura básica:\r\n\r\n````tsx\r\n// Imports agrupados y ordenados\r\nimport React from 'react';\r\n\r\n// Third-party libraries\r\nimport classNames from 'classnames';\r\n\r\n// Components\r\nimport Button from '@/components/atoms/Button';\r\n\r\n// Hooks and utils\r\nimport { useFormattedDate } from '@/hooks/useFormattedDate';\r\n\r\n// Types\r\ninterface MyComponentProps {\r\n  title: string;\r\n  date: Date;\r\n  onClick?: () => void;\r\n}\r\n\r\n// Componente con comentario docstring\r\n/**\r\n * MyComponent - Descripción del componente\r\n * \r\n * @param title - Título para mostrar\r\n * @param date - Fecha para formatear y mostrar\r\n * @param onClick - Función opcional para manejar clics\r\n */","metadata":{"source":"docs\\guia_de_desarrollo.txt","loc":{"lines":{"from":49,"to":84}}}}],["97647d20-b863-4eea-87e0-6a1ce2bbe621",{"pageContent":"* MyComponent - Descripción del componente\r\n * \r\n * @param title - Título para mostrar\r\n * @param date - Fecha para formatear y mostrar\r\n * @param onClick - Función opcional para manejar clics\r\n */\r\nexport const MyComponent: React.FC<MyComponentProps> = ({ \r\n  title, \r\n  date, \r\n  onClick \r\n}) => {\r\n  // Hooks primero\r\n  const formattedDate = useFormattedDate(date);\r\n  \r\n  // Handlers y funciones\r\n  const handleClick = () => {\r\n    if (onClick) {\r\n      onClick();\r\n    }\r\n    // Lógica adicional\r\n  };\r\n  \r\n  // Renderizado con return explícito\r\n  return (\r\n    <div className=\"p-4 bg-white rounded shadow\">\r\n      <h2 className=\"text-lg font-bold\">{title}</h2>\r\n      <p className=\"text-sm text-gray-500\">{formattedDate}</p>\r\n      <Button onClick={handleClick}>Acción</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Exportación por defecto\r\nexport default MyComponent;\r\n````\r\n\r\n## Gestión de Estado\r\n\r\nPara la gestión de estado en la aplicación, utilizamos Jotai siguiendo estos principios:","metadata":{"source":"docs\\guia_de_desarrollo.txt","loc":{"lines":{"from":79,"to":117}}}}],["5b9ff2ee-855e-445f-b134-6edc447540bb",{"pageContent":");\r\n};\r\n\r\n// Exportación por defecto\r\nexport default MyComponent;\r\n````\r\n\r\n## Gestión de Estado\r\n\r\nPara la gestión de estado en la aplicación, utilizamos Jotai siguiendo estos principios:\r\n\r\n### Estructura de los Átomos\r\n\r\n`Organizamos los átomos de Jotai en archivos dedicados dentro del directorio src/jotai/`:\r\n\r\n````tsx\r\n// src/jotai/documentAtoms.ts\r\nimport { atom } from 'jotai';\r\nimport type { Document } from '@/types';\r\n\r\n// Estado primario: átomo base con la lista de documentos\r\nexport const documentsAtom = atom<Document[]>([]);\r\n\r\n// Estado derivado: documentos filtrados por tipo\r\nexport const pdfDocumentsAtom = atom((get) => {\r\n  const documents = get(documentsAtom);\r\n  return documents.filter(doc => doc.type === 'pdf');\r\n});\r\n\r\n// Átomo para escritura/lectura: filtro actual\r\nexport const documentFilterAtom = atom<string>('');\r\n\r\n// Estado derivado que combina múltiples átomos\r\nexport const filteredDocumentsAtom = atom((get) => {\r\n  const documents = get(documentsAtom);","metadata":{"source":"docs\\guia_de_desarrollo.txt","loc":{"lines":{"from":108,"to":142}}}}],["d36b04ce-9e73-4dec-89a7-3c8a655600c2",{"pageContent":"export const documentFilterAtom = atom<string>('');\r\n\r\n// Estado derivado que combina múltiples átomos\r\nexport const filteredDocumentsAtom = atom((get) => {\r\n  const documents = get(documentsAtom);\r\n  const filter = get(documentFilterAtom);\r\n  \r\n  if (!filter) return documents;\r\n  \r\n  return documents.filter(doc => \r\n    doc.name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n});\r\n````\r\n\r\n### Uso de Átomos en Componentes\r\n\r\n````tsx\r\n// Ejemplo de uso en un componente\r\nimport { useAtom, useAtomValue } from 'jotai';\r\nimport { documentsAtom, filteredDocumentsAtom, documentFilterAtom } from '@/jotai/documentAtoms';\r\n\r\nconst DocumentList = () => {\r\n  // Solo lectura para datos derivados\r\n  const filteredDocuments = useAtomValue(filteredDocumentsAtom);\r\n  \r\n  // Lectura y escritura para estado mutable\r\n  const [filter, setFilter] = useAtom(documentFilterAtom);\r\n  \r\n  return (\r\n    <div>\r\n      <input \r\n        type=\"text\" \r\n        value={filter}","metadata":{"source":"docs\\guia_de_desarrollo.txt","loc":{"lines":{"from":138,"to":171}}}}],["b7fc4117-3e31-4f57-b8fa-47af0fb94de0",{"pageContent":"// Lectura y escritura para estado mutable\r\n  const [filter, setFilter] = useAtom(documentFilterAtom);\r\n  \r\n  return (\r\n    <div>\r\n      <input \r\n        type=\"text\" \r\n        value={filter}\r\n        onChange={(e) => setFilter(e.target.value)}\r\n        placeholder=\"Filtrar documentos...\"\r\n      />\r\n      <ul>\r\n        {filteredDocuments.map(doc => (\r\n          <li key={doc.id}>{doc.name}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n````\r\n\r\n## Control de Versiones y Flujo de Trabajo Git\r\n\r\nUtilizamos Git con el siguiente flujo de trabajo:\r\n\r\n### Ramas Principales\r\n\r\n- `main`: Rama de producción. Código estable y listo para desplegar.\r\n- `development`: Rama de desarrollo. Integración de funcionalidades completadas.\r\n\r\n### Ramas de Funcionalidades\r\n\r\nPara nuevas funcionalidades, seguir esta convención de nombrado:\r\n\r\n- `feature/[issue-number]-descripcion-corta`\r\n- `bugfix/[issue-number]-descripcion-del-bug`\r\n- `refactor/[issue-number]-componente-refactorizado`","metadata":{"source":"docs\\guia_de_desarrollo.txt","loc":{"lines":{"from":164,"to":200}}}}],["8a14a1e0-77a3-4fa0-80cf-3ced8c8d702c",{"pageContent":"- `feature/[issue-number]-descripcion-corta`\r\n- `bugfix/[issue-number]-descripcion-del-bug`\r\n- `refactor/[issue-number]-componente-refactorizado`\r\n\r\n### Proceso de Pull Request\r\n\r\nTodas las contribuciones deben pasar por un PR que cumple con estos requisitos:\r\n\r\n1. `La rama debe estar actualizada con la rama de destino (normalmente development`).\r\n2. Debe pasar todos los checks de CI (linting, tests, build).\r\n3. Requiere al menos una aprobación de un desarrollador.\r\n4. Incluir una descripción detallada de los cambios realizados.\r\n\r\n### Formato de Mensajes de Commit\r\n\r\nUsamos convenciones de mensajes de commit basadas en Conventional Commits:\r\n\r\n````\r\n<tipo>(<alcance>): <descripción>\r\n\r\n[cuerpo opcional]\r\n\r\n[pie opcional]\r\n````\r\n\r\nEjemplos:\r\n\r\n- `feat(documents): add drag and drop functionality for pdf files`\r\n- `fix(auth): resolve session expiration issue`\r\n- `docs(readme): update installation instructions`\r\n- `refactor(components): convert Button to typescript`\r\n\r\n## Pruebas","metadata":{"source":"docs\\guia_de_desarrollo.txt","loc":{"lines":{"from":198,"to":230}}}}],["176849ba-8ce8-4c6b-83bc-c5bf441896d0",{"pageContent":"- `fix(auth): resolve session expiration issue`\r\n- `docs(readme): update installation instructions`\r\n- `refactor(components): convert Button to typescript`\r\n\r\n## Pruebas\r\n\r\nLas pruebas son una parte fundamental del proceso de desarrollo. Utilizamos Jest para las pruebas unitarias y de integración.\r\n\r\n### Estructura de las Pruebas\r\n\r\n`Las pruebas se organizan en directorios __tests__` junto a los componentes o módulos que prueban.\r\n\r\n````\r\n├── components/\r\n│   ├── Button/\r\n│   │   ├── index.tsx\r\n│   │   ├── Button.types.ts\r\n│   │   └── __tests__/\r\n│   │       └── Button.test.tsx\r\n````\r\n\r\n### Ejemplo de Prueba de Componente\r\n\r\n````tsx\r\n// Button.test.tsx\r\nimport { render, screen, fireEvent } from '@testing-library/react';\r\nimport Button from '../index';\r\n\r\ndescribe('Button Component', () => {\r\n  test('renders with correct text', () => {\r\n    render(<Button>Click me</Button>);\r\n    expect(screen.getByText('Click me')).toBeInTheDocument();\r\n  });","metadata":{"source":"docs\\guia_de_desarrollo.txt","loc":{"lines":{"from":226,"to":258}}}}],["194e31c4-681b-4cd2-9253-e843323524ed",{"pageContent":"describe('Button Component', () => {\r\n  test('renders with correct text', () => {\r\n    render(<Button>Click me</Button>);\r\n    expect(screen.getByText('Click me')).toBeInTheDocument();\r\n  });\r\n\r\n  test('calls onClick handler when clicked', () => {\r\n    const handleClick = jest.fn();\r\n    render(<Button onClick={handleClick}>Click me</Button>);\r\n    \r\n    fireEvent.click(screen.getByText('Click me'));\r\n    expect(handleClick).toHaveBeenCalledTimes(1);\r\n  });\r\n\r\n  test('applies disabled styles when disabled', () => {\r\n    render(<Button disabled>Disabled Button</Button>);\r\n    const button = screen.getByText('Disabled Button');\r\n    \r\n    expect(button).toHaveAttribute('disabled');\r\n    expect(button).toHaveClass('opacity-50');\r\n  });\r\n});\r\n````\r\n\r\n## Optimización y Rendimiento\r\n\r\nPara mantener la aplicación rápida y eficiente, sigue estas prácticas:\r\n\r\n### Lista de Comprobación de Rendimiento\r\n\r\n- Utilizar memorización para componentes o cálculos costosos.","metadata":{"source":"docs\\guia_de_desarrollo.txt","loc":{"lines":{"from":254,"to":284}}}}],["03672c92-1138-4cb9-92ff-727f09c04519",{"pageContent":"Para mantener la aplicación rápida y eficiente, sigue estas prácticas:\r\n\r\n### Lista de Comprobación de Rendimiento\r\n\r\n- Utilizar memorización para componentes o cálculos costosos.\r\n- Usar Lighthouse para evaluar rendimiento periodicamente.\r\n- Implementar carga diferida para componentes grandes.\r\n- Optimizar las imágenes con el componente Image de Next.js.\r\n- Implementar paginación o virtualización para listas grandes.\r\n\r\n### Ejemplo de Carga Diferida\r\n\r\n````tsx\r\n// Uso de importación dinámica para componentes pesados\r\nimport dynamic from 'next/dynamic';\r\n\r\n// El componente se cargará sólo cuando sea necesario\r\nconst PDFViewer = dynamic(\r\n  () => import('@/components/organisms/PDFViewer'),\r\n  {\r\n    loading: () => <p>Cargando visor de PDF...</p>,\r\n    ssr: false // Deshabilitar SSR si es un componente solo del lado del cliente\r\n  }\r\n);\r\n\r\nconst DocumentPage = ({ documentId }) => {\r\n  return (\r\n    <div>\r\n      <h1>Visor de Documentos</h1>","metadata":{"source":"docs\\guia_de_desarrollo.txt","loc":{"lines":{"from":280,"to":308}}}}],["0c9e45ff-50aa-426b-bf4b-891e4fd665bd",{"pageContent":"ssr: false // Deshabilitar SSR si es un componente solo del lado del cliente\r\n  }\r\n);\r\n\r\nconst DocumentPage = ({ documentId }) => {\r\n  return (\r\n    <div>\r\n      <h1>Visor de Documentos</h1>\r\n      {/* El componente se carga sólo cuando se renderiza */}\r\n      <PDFViewer documentId={documentId} />\r\n    </div>\r\n  );\r\n};\r\n````\r\n\r\n## Recursos y Documentación Adicional\r\n\r\nPara obtener más información sobre las herramientas y prácticas utilizadas en el proyecto, consulta estos recursos:\r\n\r\n- **Next.js:** https://nextjs.org/docs\r\n- **Jotai:** https://jotai.org/docs/introduction\r\n- **Material UI:** https://mui.com/material-ui/getting-started/\r\n- **Tailwind CSS:** https://tailwindcss.com/docs\r\n- **React PDF Viewer:** https://react-pdf-viewer.dev","metadata":{"source":"docs\\guia_de_desarrollo.txt","loc":{"lines":{"from":301,"to":324}}}}]],{"0":"4ded05cf-5020-4bb0-83ef-64712237a855","1":"0d8560ff-db8e-4bf4-8295-f3c93ce96908","2":"ae1dace0-34da-47bd-8960-8ac21ff81cad","3":"97647d20-b863-4eea-87e0-6a1ce2bbe621","4":"5b9ff2ee-855e-445f-b134-6edc447540bb","5":"d36b04ce-9e73-4dec-89a7-3c8a655600c2","6":"b7fc4117-3e31-4f57-b8fa-47af0fb94de0","7":"8a14a1e0-77a3-4fa0-80cf-3ced8c8d702c","8":"176849ba-8ce8-4c6b-83bc-c5bf441896d0","9":"194e31c4-681b-4cd2-9253-e843323524ed","10":"03672c92-1138-4cb9-92ff-727f09c04519","11":"0c9e45ff-50aa-426b-bf4b-891e4fd665bd"}]