[[["80f4e30c-3739-4767-bee4-9665c3b84dad",{"pageContent":"## Que es un patron de diseno ?\r\n\r\nEs como una receta o un plan de accion para solucionar un problema, funcionan en diferentes ambientes tanto fron como backend\r\n\r\n[**Se clasifican en 3 campos generales**](https://www.notion.so/Clasificacion-y-uso-5ca0d6225b6c4ecda13e5e5a263c19d9?pvs=21)\r\n\r\n### **Patrones de Creación:**\r\n\r\n1. **Singleton:** Garantiza una única instancia de una clase y proporciona un punto de acceso global a ella.\r\n2. **Factory Method:** Define una interfaz para crear objetos en una superclase, delegando la creación de objetos a las subclases.\r\n3. **Abstract Factory:** Proporciona una interfaz para crear familias de objetos relacionados sin especificar sus clases concretas.\r\n4. **Builder:** Separar la construcción de un objeto complejo de su representación, permitiendo la creación de diferentes representaciones del mismo objeto.","metadata":{"source":"docs\\patrones_de_diseno.txt","loc":{"lines":{"from":1,"to":12}}}}],["bb484513-5a18-4c49-927a-78a2125e53af",{"pageContent":"4. **Builder:** Separar la construcción de un objeto complejo de su representación, permitiendo la creación de diferentes representaciones del mismo objeto.\r\n5. **Prototype:** Utiliza un prototipo existente como base para crear nuevos objetos, permitiendo la copia de objetos complejos sin acoplar a sus clases concretas.\r\n\r\n### **Patrones de Estructura:**\r\n\r\n1. **Adapter:** Permite que interfaces incompatibles trabajen juntas, convirtiendo la interfaz de una clase en otra interfaz que el cliente espera.\r\n2. **Bridge:** Separa una abstracción de su implementación, permitiendo que ambas puedan variar de forma independiente.\r\n3. **Composite:** Compone objetos en estructuras de árbol para representar jerarquías parte-todo, permitiendo tratar a los objetos individuales y a las composiciones de manera uniforme.\r\n4. **Decorator:** Agrega comportamiento adicional a un objeto de forma dinámica, proporcionando una alternativa flexible a la herencia para extender funcionalidades.","metadata":{"source":"docs\\patrones_de_diseno.txt","loc":{"lines":{"from":12,"to":20}}}}],["f7efbc3a-c15c-4240-9644-583876e68795",{"pageContent":"4. **Decorator:** Agrega comportamiento adicional a un objeto de forma dinámica, proporcionando una alternativa flexible a la herencia para extender funcionalidades.\r\n5. **Facade:** Proporciona una interfaz unificada para un conjunto de interfaces en un subsistema, simplificando el acceso y la utilización de dicho subsistema.\r\n6. **Flyweight:** Minimiza el uso de memoria compartiendo lo máximo posible entre objetos similares, reduciendo la redundancia cuando se manejan grandes cantidades de objetos.\r\n7. **Proxy:** Actúa como un intermediario para controlar el acceso a otro objeto, permitiendo agregar funcionalidades como lazy loading, control de acceso, entre otros.\r\n\r\n### **Patrones de Comportamiento:**\r\n\r\n1. **Chain of Responsibility:** Permite pasar solicitudes a través de una cadena de manejadores, cada uno de los cuales decide si manejar la solicitud o pasarla al siguiente en la cadena.","metadata":{"source":"docs\\patrones_de_diseno.txt","loc":{"lines":{"from":20,"to":27}}}}],["2a865dbc-d9ca-4d37-a844-c3c7431e6314",{"pageContent":"1. **Chain of Responsibility:** Permite pasar solicitudes a través de una cadena de manejadores, cada uno de los cuales decide si manejar la solicitud o pasarla al siguiente en la cadena.\r\n2. **Command:** Encapsula una solicitud como un objeto, permitiendo parametrizar clientes con diferentes solicitudes, encolar o registrar solicitudes, y soportar operaciones reversibles.\r\n3. **Interpreter:** Define una representación gramatical para un lenguaje y proporciona un intérprete para evaluar sentencias en ese lenguaje.\r\n4. **Iterator:** Proporciona una forma de acceder a elementos de una colección de manera secuencial sin exponer su representación interna.\r\n5. **Mediator:** Define un objeto que encapsula cómo un conjunto de objetos interactúa, promoviendo el bajo acoplamiento al evitar que los objetos se comuniquen directamente entre sí.","metadata":{"source":"docs\\patrones_de_diseno.txt","loc":{"lines":{"from":27,"to":31}}}}],["6ac2543c-4856-4a50-a187-cb5b9aa3e85c",{"pageContent":"5. **Mediator:** Define un objeto que encapsula cómo un conjunto de objetos interactúa, promoviendo el bajo acoplamiento al evitar que los objetos se comuniquen directamente entre sí.\r\n6. **Memento:** Captura y externaliza el estado interno de un objeto, permitiendo restaurar el objeto a un estado anterior sin violar la encapsulación.\r\n7. **Observer:** Define una dependencia uno a muchos entre objetos, de modo que cuando un objeto cambia su estado, todos los objetos dependientes son notificados y actualizados automáticamente.\r\n8. **State:** Permite que un objeto altere su comportamiento cuando su estado interno cambia, creando una serie de clases para cada estado posible y evitando largas listas de condiciones.\r\n9. **Strategy:** Define una familia de algoritmos, encapsula cada uno de ellos y los hace intercambiables, permitiendo que el algoritmo varíe independientemente de los clientes que lo utilizan.","metadata":{"source":"docs\\patrones_de_diseno.txt","loc":{"lines":{"from":31,"to":35}}}}],["58195842-6361-4ecc-adf7-d22b6b9dfd9a",{"pageContent":"9. **Strategy:** Define una familia de algoritmos, encapsula cada uno de ellos y los hace intercambiables, permitiendo que el algoritmo varíe independientemente de los clientes que lo utilizan.\r\n10. **Template Method:** Define el esqueleto de un algoritmo en una operación, delegando algunos pasos a las subclases. Las subclases pueden redefinir ciertos pasos del algoritmo sin cambiar su estructura general.\r\n11. **Visitor:** Permite agregar nuevas operaciones a objetos existentes sin modificar su estructura, separando el objeto de lo que se quiere hacer con él.\r\n\r\n## Cuales son los 4 principios de la programacion orientada a objetos?\r\n\r\n1. encapsulamiento: Cada objeto debe mantener en secreto sus detalles y valores internos y solo debe exporner las nterfaces necesarias para interactuar con el.\r\n2. Abstraccion: Conocemos la forma de interactuar y que hace un objeto pero no conocemos sus comportamientos internos","metadata":{"source":"docs\\patrones_de_diseno.txt","loc":{"lines":{"from":35,"to":42}}}}],["5bbbaf90-9d2c-44e2-88c8-03c1a8fc6f5d",{"pageContent":"2. Abstraccion: Conocemos la forma de interactuar y que hace un objeto pero no conocemos sus comportamientos internos\r\n3. Herencia: Se basa en la reutilizacion, atributos y metodos comunes pueden ser reutilzados, se pueden definir relaciones jeragicas entre clases.\r\n4. Polimorfismo: Nos permite la posibilidad de procesar objetos de distintas maneras.\r\n\r\n[Clasificacion y uso](https://www.notion.so/Clasificacion-y-uso-5ca0d6225b6c4ecda13e5e5a263c19d9?pvs=21)\r\n\r\n# PdfViewer Component Documentation\r\n\r\nA client-side React component that renders PDF documents with multiple interactive features including zoom, search, page navigation, and more.\r\n\r\n## Component Overview\r\n\r\nThe PdfViewer is an organism-level component built with react-pdf-viewer that provides a complete PDF viewing experience. It integrates with multiple plugins to offer functionality such as zoom controls, page navigation, printing, downloading, full-screen mode, and text search.\r\n\r\n## Props","metadata":{"source":"docs\\patrones_de_diseno.txt","loc":{"lines":{"from":42,"to":56}}}}],["44a7f5b4-6b92-4725-a7ee-77db5240fa3c",{"pageContent":"## Props\r\n\r\nThe component accepts the following props:\r\n\r\n- **`fileUrl`** (string, required): URL to the PDF file to be displayed.\r\n- **`maxWidthViewer`** (number, optional): Maximum width of the PDF viewer in pixels. Default is 950px.\r\n\r\n## Features\r\n\r\n- **Zoom controls**: Zoom in, zoom out, and reset zoom level\r\n- **Page navigation**: Navigate between pages with page input control\r\n- **Document actions**: Download, print, and enter full-screen mode\r\n- **Text search**: Search text within the PDF document (Ctrl+F shortcut supported)\r\n- **Smooth scrolling**: Enhanced scroll experience\r\n\r\n## Dependencies\r\n\r\n### External Libraries\r\n\r\n- `@react-pdf-viewer/core`: Core PDF viewer functionality\r\n- `pdfjs-dist`: PDF.js distribution used for PDF rendering\r\n- `Various @react-pdf-viewer plugins`: full-screen, page-navigation, print, search, zoom, and get-file\r\n\r\n### Internal Components\r\n\r\n- `EditDocumentMenu`: Provides the control menu with navigation, zoom, and action buttons","metadata":{"source":"docs\\patrones_de_diseno.txt","loc":{"lines":{"from":56,"to":81}}}}],["d58ee215-cce4-4846-944c-aa1677afef29",{"pageContent":"### Internal Components\r\n\r\n- `EditDocumentMenu`: Provides the control menu with navigation, zoom, and action buttons\r\n\r\n### Custom Hooks\r\n\r\n- `usePdfPlugins`: Initializes and provides all the PDF viewer plugins\r\n\r\n## Styling\r\n\r\nThe component uses:\r\n\r\n- Tailwind CSS classes for layout and responsiveness\r\n- Imported CSS styles from various @react-pdf-viewer plugins\r\n- Dynamic styling through useMemo for the viewer width\r\n\r\n## Performance Optimizations\r\n\r\n- `React.memo` is used to prevent unnecessary re-renders\r\n- `useMemo` is used to memoize the viewer style\r\n- External worker is used for PDF processing to keep UI responsive\r\n\r\n## Usage Example\r\n\r\nHere's a basic example of how to use this component:\r\n\r\n```jsx\r\nimport PdfViewer from '@/components/organisms/PdfViewer';\r\n\r\nfunction DocumentPage() {\r\n  const pdfUrl = 'https://example.com/sample.pdf';\r\n  \r\n  return (\r\n    <div className=\"document-container\">\r\n      <PdfViewer fileUrl={pdfUrl} />\r\n    </div>\r\n  );\r\n}\r\n```","metadata":{"source":"docs\\patrones_de_diseno.txt","loc":{"lines":{"from":79,"to":117}}}}],["265e1bb3-1945-43e5-846d-937bbf27edbe",{"pageContent":"const pdfUrl = 'https://example.com/sample.pdf';\r\n  \r\n  return (\r\n    <div className=\"document-container\">\r\n      <PdfViewer fileUrl={pdfUrl} />\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## Browser Compatibility\r\n\r\nThe component uses the PDF.js worker which needs to be loaded from a CDN. The component has a check for browser environment to ensure the worker is only loaded client-side:\r\n\r\n```jsx\r\n// Client-side only worker initialization\r\nif (typeof window !== 'undefined') {\r\n  GlobalWorkerOptions.workerSrc =\r\n    'https://unpkg.com/pdfjs-dist@3.4.120/build/pdf.worker.min.js';\r\n}\r\n```","metadata":{"source":"docs\\patrones_de_diseno.txt","loc":{"lines":{"from":109,"to":129}}}}],["22bd2f85-610b-4546-a71f-b8caa73758cf",{"pageContent":"## Que es un patron de diseno ?\r\n\r\nEs como una receta o un plan de accion para solucionar un problema, funcionan en diferentes ambientes tanto fron como backend\r\n\r\n[**Se clasifican en 3 campos generales**](https://www.notion.so/Clasificacion-y-uso-5ca0d6225b6c4ecda13e5e5a263c19d9?pvs=21)\r\n\r\n### **Patrones de Creación:**\r\n\r\n1. **Singleton:** Garantiza una única instancia de una clase y proporciona un punto de acceso global a ella.\r\n2. **Factory Method:** Define una interfaz para crear objetos en una superclase, delegando la creación de objetos a las subclases.\r\n3. **Abstract Factory:** Proporciona una interfaz para crear familias de objetos relacionados sin especificar sus clases concretas.\r\n4. **Builder:** Separar la construcción de un objeto complejo de su representación, permitiendo la creación de diferentes representaciones del mismo objeto.","metadata":{"source":"docs\\patrones_de_diseno.txt","loc":{"lines":{"from":1,"to":12}}}}],["378ca1e2-9b9c-4c22-ae8a-cc4dfb659e8a",{"pageContent":"4. **Builder:** Separar la construcción de un objeto complejo de su representación, permitiendo la creación de diferentes representaciones del mismo objeto.\r\n5. **Prototype:** Utiliza un prototipo existente como base para crear nuevos objetos, permitiendo la copia de objetos complejos sin acoplar a sus clases concretas.\r\n\r\n### **Patrones de Estructura:**\r\n\r\n1. **Adapter:** Permite que interfaces incompatibles trabajen juntas, convirtiendo la interfaz de una clase en otra interfaz que el cliente espera.\r\n2. **Bridge:** Separa una abstracción de su implementación, permitiendo que ambas puedan variar de forma independiente.\r\n3. **Composite:** Compone objetos en estructuras de árbol para representar jerarquías parte-todo, permitiendo tratar a los objetos individuales y a las composiciones de manera uniforme.\r\n4. **Decorator:** Agrega comportamiento adicional a un objeto de forma dinámica, proporcionando una alternativa flexible a la herencia para extender funcionalidades.","metadata":{"source":"docs\\patrones_de_diseno.txt","loc":{"lines":{"from":12,"to":20}}}}],["eafcf012-35a5-43aa-9c16-0f9cb9261fff",{"pageContent":"4. **Decorator:** Agrega comportamiento adicional a un objeto de forma dinámica, proporcionando una alternativa flexible a la herencia para extender funcionalidades.\r\n5. **Facade:** Proporciona una interfaz unificada para un conjunto de interfaces en un subsistema, simplificando el acceso y la utilización de dicho subsistema.\r\n6. **Flyweight:** Minimiza el uso de memoria compartiendo lo máximo posible entre objetos similares, reduciendo la redundancia cuando se manejan grandes cantidades de objetos.\r\n7. **Proxy:** Actúa como un intermediario para controlar el acceso a otro objeto, permitiendo agregar funcionalidades como lazy loading, control de acceso, entre otros.\r\n\r\n### **Patrones de Comportamiento:**\r\n\r\n1. **Chain of Responsibility:** Permite pasar solicitudes a través de una cadena de manejadores, cada uno de los cuales decide si manejar la solicitud o pasarla al siguiente en la cadena.","metadata":{"source":"docs\\patrones_de_diseno.txt","loc":{"lines":{"from":20,"to":27}}}}],["f9c4ada3-1bc1-4cfb-b1a6-1873b420033f",{"pageContent":"1. **Chain of Responsibility:** Permite pasar solicitudes a través de una cadena de manejadores, cada uno de los cuales decide si manejar la solicitud o pasarla al siguiente en la cadena.\r\n2. **Command:** Encapsula una solicitud como un objeto, permitiendo parametrizar clientes con diferentes solicitudes, encolar o registrar solicitudes, y soportar operaciones reversibles.\r\n3. **Interpreter:** Define una representación gramatical para un lenguaje y proporciona un intérprete para evaluar sentencias en ese lenguaje.\r\n4. **Iterator:** Proporciona una forma de acceder a elementos de una colección de manera secuencial sin exponer su representación interna.\r\n5. **Mediator:** Define un objeto que encapsula cómo un conjunto de objetos interactúa, promoviendo el bajo acoplamiento al evitar que los objetos se comuniquen directamente entre sí.","metadata":{"source":"docs\\patrones_de_diseno.txt","loc":{"lines":{"from":27,"to":31}}}}],["7492c994-fe36-40bd-a476-e445336d9756",{"pageContent":"5. **Mediator:** Define un objeto que encapsula cómo un conjunto de objetos interactúa, promoviendo el bajo acoplamiento al evitar que los objetos se comuniquen directamente entre sí.\r\n6. **Memento:** Captura y externaliza el estado interno de un objeto, permitiendo restaurar el objeto a un estado anterior sin violar la encapsulación.\r\n7. **Observer:** Define una dependencia uno a muchos entre objetos, de modo que cuando un objeto cambia su estado, todos los objetos dependientes son notificados y actualizados automáticamente.\r\n8. **State:** Permite que un objeto altere su comportamiento cuando su estado interno cambia, creando una serie de clases para cada estado posible y evitando largas listas de condiciones.\r\n9. **Strategy:** Define una familia de algoritmos, encapsula cada uno de ellos y los hace intercambiables, permitiendo que el algoritmo varíe independientemente de los clientes que lo utilizan.","metadata":{"source":"docs\\patrones_de_diseno.txt","loc":{"lines":{"from":31,"to":35}}}}],["6e054ccc-e4db-4066-99db-dc36730489fb",{"pageContent":"9. **Strategy:** Define una familia de algoritmos, encapsula cada uno de ellos y los hace intercambiables, permitiendo que el algoritmo varíe independientemente de los clientes que lo utilizan.\r\n10. **Template Method:** Define el esqueleto de un algoritmo en una operación, delegando algunos pasos a las subclases. Las subclases pueden redefinir ciertos pasos del algoritmo sin cambiar su estructura general.\r\n11. **Visitor:** Permite agregar nuevas operaciones a objetos existentes sin modificar su estructura, separando el objeto de lo que se quiere hacer con él.\r\n\r\n## Cuales son los 4 principios de la programacion orientada a objetos?\r\n\r\n1. encapsulamiento: Cada objeto debe mantener en secreto sus detalles y valores internos y solo debe exporner las nterfaces necesarias para interactuar con el.\r\n2. Abstraccion: Conocemos la forma de interactuar y que hace un objeto pero no conocemos sus comportamientos internos","metadata":{"source":"docs\\patrones_de_diseno.txt","loc":{"lines":{"from":35,"to":42}}}}],["f7d446b3-cbb8-4f27-8711-2bc20f2d2ff1",{"pageContent":"2. Abstraccion: Conocemos la forma de interactuar y que hace un objeto pero no conocemos sus comportamientos internos\r\n3. Herencia: Se basa en la reutilizacion, atributos y metodos comunes pueden ser reutilzados, se pueden definir relaciones jeragicas entre clases.\r\n4. Polimorfismo: Nos permite la posibilidad de procesar objetos de distintas maneras.\r\n\r\n[Clasificacion y uso](https://www.notion.so/Clasificacion-y-uso-5ca0d6225b6c4ecda13e5e5a263c19d9?pvs=21)\r\n\r\n# PdfViewer Component Documentation\r\n\r\nA client-side React component that renders PDF documents with multiple interactive features including zoom, search, page navigation, and more.\r\n\r\n## Component Overview\r\n\r\nThe PdfViewer is an organism-level component built with react-pdf-viewer that provides a complete PDF viewing experience. It integrates with multiple plugins to offer functionality such as zoom controls, page navigation, printing, downloading, full-screen mode, and text search.\r\n\r\n## Props","metadata":{"source":"docs\\patrones_de_diseno.txt","loc":{"lines":{"from":42,"to":56}}}}],["cbebea41-99a8-4216-aa36-3d57ba3fb63d",{"pageContent":"## Props\r\n\r\nThe component accepts the following props:\r\n\r\n- **`fileUrl`** (string, required): URL to the PDF file to be displayed.\r\n- **`maxWidthViewer`** (number, optional): Maximum width of the PDF viewer in pixels. Default is 950px.\r\n\r\n## Features\r\n\r\n- **Zoom controls**: Zoom in, zoom out, and reset zoom level\r\n- **Page navigation**: Navigate between pages with page input control\r\n- **Document actions**: Download, print, and enter full-screen mode\r\n- **Text search**: Search text within the PDF document (Ctrl+F shortcut supported)\r\n- **Smooth scrolling**: Enhanced scroll experience\r\n\r\n## Dependencies\r\n\r\n### External Libraries\r\n\r\n- `@react-pdf-viewer/core`: Core PDF viewer functionality\r\n- `pdfjs-dist`: PDF.js distribution used for PDF rendering\r\n- `Various @react-pdf-viewer plugins`: full-screen, page-navigation, print, search, zoom, and get-file\r\n\r\n### Internal Components\r\n\r\n- `EditDocumentMenu`: Provides the control menu with navigation, zoom, and action buttons","metadata":{"source":"docs\\patrones_de_diseno.txt","loc":{"lines":{"from":56,"to":81}}}}],["3fe32251-dda8-4b3a-b2a9-0e2ed34c48fe",{"pageContent":"### Internal Components\r\n\r\n- `EditDocumentMenu`: Provides the control menu with navigation, zoom, and action buttons\r\n\r\n### Custom Hooks\r\n\r\n- `usePdfPlugins`: Initializes and provides all the PDF viewer plugins\r\n\r\n## Styling\r\n\r\nThe component uses:\r\n\r\n- Tailwind CSS classes for layout and responsiveness\r\n- Imported CSS styles from various @react-pdf-viewer plugins\r\n- Dynamic styling through useMemo for the viewer width\r\n\r\n## Performance Optimizations\r\n\r\n- `React.memo` is used to prevent unnecessary re-renders\r\n- `useMemo` is used to memoize the viewer style\r\n- External worker is used for PDF processing to keep UI responsive\r\n\r\n## Usage Example\r\n\r\nHere's a basic example of how to use this component:\r\n\r\n```jsx\r\nimport PdfViewer from '@/components/organisms/PdfViewer';\r\n\r\nfunction DocumentPage() {\r\n  const pdfUrl = 'https://example.com/sample.pdf';\r\n  \r\n  return (\r\n    <div className=\"document-container\">\r\n      <PdfViewer fileUrl={pdfUrl} />\r\n    </div>\r\n  );\r\n}\r\n```","metadata":{"source":"docs\\patrones_de_diseno.txt","loc":{"lines":{"from":79,"to":117}}}}],["1e335170-ea75-4d0e-9a2a-32e96db7ce44",{"pageContent":"const pdfUrl = 'https://example.com/sample.pdf';\r\n  \r\n  return (\r\n    <div className=\"document-container\">\r\n      <PdfViewer fileUrl={pdfUrl} />\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## Browser Compatibility\r\n\r\nThe component uses the PDF.js worker which needs to be loaded from a CDN. The component has a check for browser environment to ensure the worker is only loaded client-side:\r\n\r\n```jsx\r\n// Client-side only worker initialization\r\nif (typeof window !== 'undefined') {\r\n  GlobalWorkerOptions.workerSrc =\r\n    'https://unpkg.com/pdfjs-dist@3.4.120/build/pdf.worker.min.js';\r\n}\r\n```","metadata":{"source":"docs\\patrones_de_diseno.txt","loc":{"lines":{"from":109,"to":129}}}}]],{"0":"80f4e30c-3739-4767-bee4-9665c3b84dad","1":"bb484513-5a18-4c49-927a-78a2125e53af","2":"f7efbc3a-c15c-4240-9644-583876e68795","3":"2a865dbc-d9ca-4d37-a844-c3c7431e6314","4":"6ac2543c-4856-4a50-a187-cb5b9aa3e85c","5":"58195842-6361-4ecc-adf7-d22b6b9dfd9a","6":"5bbbaf90-9d2c-44e2-88c8-03c1a8fc6f5d","7":"44a7f5b4-6b92-4725-a7ee-77db5240fa3c","8":"d58ee215-cce4-4846-944c-aa1677afef29","9":"265e1bb3-1945-43e5-846d-937bbf27edbe","10":"22bd2f85-610b-4546-a71f-b8caa73758cf","11":"378ca1e2-9b9c-4c22-ae8a-cc4dfb659e8a","12":"eafcf012-35a5-43aa-9c16-0f9cb9261fff","13":"f9c4ada3-1bc1-4cfb-b1a6-1873b420033f","14":"7492c994-fe36-40bd-a476-e445336d9756","15":"6e054ccc-e4db-4066-99db-dc36730489fb","16":"f7d446b3-cbb8-4f27-8711-2bc20f2d2ff1","17":"cbebea41-99a8-4216-aa36-3d57ba3fb63d","18":"3fe32251-dda8-4b3a-b2a9-0e2ed34c48fe","19":"1e335170-ea75-4d0e-9a2a-32e96db7ce44"}]