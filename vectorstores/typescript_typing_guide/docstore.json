[[["d5de8e02-986b-4d7c-b2a7-4872e7ef755a",{"pageContent":"Typescript typing Guide\n1. Introducci√≥n\nObjetivo del Documento\nExplicar la importancia del tipado en TypeScript y establecer lineamientos\nclaros sobre el uso de interface, type, any, unknown y gen√©ricos, adem√°s de\nlos tipos avanzados y enum, dentro del equipo de desarrollo en LearUp.\n\nBeneficios del Tipado\nMejora de la seguridad del c√≥digo.\nDetecci√≥n temprana de errores.\nMejor documentaci√≥n y autocompletado en IDEs.\n\n2. Uso de Interfaces\nDefinici√≥n de Interfaces\nUna interface se usa para definir la estructura de un objeto de manera clara y\nextensible. Se recomienda para estructuras que puedan evolucionar con el\ntiempo y ser extendidas.\n\nSintaxis B√°sica\ninterface User {\nid: number;\nname: string;\nemail: string;\n}\n\nExtensi√≥n de Interfaces\nPermite heredar propiedades de otras interfaces, facilitando la reutilizaci√≥n del\nc√≥digo.\n\nTypescript typing Guide\n\n1\n\n\finterface Person {\nid: number;\nname: string;\n}\ninterface Employee extends Person {\nposition: string;\n}","metadata":{"source":"docs\\typescript_typing_guide.txt","loc":{"lines":{"from":1,"to":40}}}}],["c70a5b72-af05-435f-b21b-92c399307212",{"pageContent":"Typescript typing Guide\n\n1\n\n\finterface Person {\nid: number;\nname: string;\n}\ninterface Employee extends Person {\nposition: string;\n}\n\nEjemplo Pr√°ctico\nCaso de uso: Modelado de datos de usuario en una API.\nfunction getUser(): User {\nreturn { id: 1, name: \"John Doe\", email: \"john@company.com\" };\n}\n\n3. Uso de Types\nDefinici√≥n de Types\nUn type permite definir valores basados en los tipos primitivos de TypeScript:\n\nTipos B√°sicos\n// Primitive Types\ntype Text = string;\n// Text strings\ntype Age = number;\n// Numbers (integers or decimals)\ntype IsActive = boolean; // True or false values\ntype CreatedAt = Date; // Dates and times\ntype UniqueID = symbol; // Unique identifiers\ntype AnyValue = any; // Any type (avoid using it)\ntype UnknownValue = unknown; // Any type, but safer than 'any'\ntype Nothing = void; // Functions with no return value\ntype NeverHappens = never; // Value that never occurs\n\nTypescript typing Guide\n\n2","metadata":{"source":"docs\\typescript_typing_guide.txt","loc":{"lines":{"from":30,"to":68}}}}],["11833482-16e1-4ac3-88ed-d6b350640f01",{"pageContent":"Typescript typing Guide\n\n2\n\n\fstring / number / boolean: Datos b√°sicos como nombres, edades o\nestados.\nDate ‚Üí Fechas en APIs o registros.\nsymbol ‚Üí Identificadores √∫nicos en estructuras avanzadas.\nvoid / never ‚Üí Definir funciones con retorno vac√≠o o errores.\nany / unknown ‚Üí Casos donde el tipo es incierto (se recomienda unknown\nsobre any).\n\nTipos de Uni√≥n e Intersecci√≥n\nUni√≥n (|): Permite m√∫ltiples tipos posibles.\nIntersecci√≥n (&): Combina m√∫ltiples tipos en uno solo\n\nüìå\n\n//\nUnion: A value can be one type or another\ntype ID = string | number;\ntype Status = \"active\" | \"inactive\" | \"pending\";\nlet userId: ID = 123;\nuserId = \"abc123\"; //\n\n‚úÖ Correct, as it can be a string or a number\n\nlet accountStatus: Status = \"active\";\naccountStatus = \"suspended\"; //\nError: \"suspended\" is not a valid value\n\nüìå\n\n‚ùå","metadata":{"source":"docs\\typescript_typing_guide.txt","loc":{"lines":{"from":66,"to":99}}}}],["8f86d726-3aba-45bd-9acd-35dc4f5db054",{"pageContent":"‚úÖ Correct, as it can be a string or a number\n\nlet accountStatus: Status = \"active\";\naccountStatus = \"suspended\"; //\nError: \"suspended\" is not a valid value\n\nüìå\n\n‚ùå\n\n//\nIntersection: Combines multiple types into one\ntype User = { id: number; name: string };\ntype Employee = User & { position: string; salary: number };\nconst employee: Employee = {\nid: 1,\nname: \"Alice\",\nposition: \"Developer\",\nsalary: 50000\n};\n//\n\n‚ùå Error if a property is missing (e.g., position or salary)\n\nTypescript typing Guide\n\n3\n\n\fTipos Literales\nRestringen un valor a un conjunto espec√≠fico.\ntype Role = \"admin\" | \"user\" | \"guest\"; // Can only be one of these values\n\nTipos de Funciones\nDefinen la firma de una funci√≥n, asegurando los tipos de sus par√°metros y\nrespuesta.\n// Define a function type\ntype MathOperation = (a: number, b: number) => number;\n// Functions that match the signature\nconst sum: MathOperation = (x, y) => x + y;\nconst multiply: MathOperation = (x, y) => x * y;\n\n‚û°Ô∏è 8\n‚û°Ô∏è 15","metadata":{"source":"docs\\typescript_typing_guide.txt","loc":{"lines":{"from":91,"to":133}}}}],["3986514a-92b6-4941-8733-49e3fd48549e",{"pageContent":"‚û°Ô∏è 8\n‚û°Ô∏è 15\n\nconsole.log(sum(5, 3));\n//\nconsole.log(multiply(5, 3)); //\n\n4. Uso de Tipos Gen√©ricos\nDefinici√≥n de Tipos Gen√©ricos\nLos tipos gen√©ricos permiten crear estructuras reutilizables que trabajan con\ntipos din√°micos en lugar de un tipo fijo. Esto los hace flexibles y escalables.\n\nSintaxis basica de Gen√©ricos\nfunction identity<T>(arg: T): T {\nreturn arg;\n}\n\n‚û°Ô∏è 10 (type: number)\nconsole.log(identity(\"Hola\")); // ‚û°Ô∏è \"Hola\" (type: string)\nconsole.log(identity(10));\n\nT\n\n//\n\nes un par√°metro de tipo que representa un tipo din√°mico.\n\nTypescript typing Guide\n\n4\n\n\fSe resuelve autom√°ticamente seg√∫n el valor pasado.\n\nUso de gen√©ricos en interfaces\nEn interfaces tambi√©n pueden usar gen√©ricos, lo que permite definir\nestructuras reutilizables sin perder el tipado fuerte.\ninterface ApiResponse<T> {\ndata: T | null;\nstatus: number;\nerror?: string;\n}\nconst userResponse: ApiResponse<{ id: number; name: string }> = { // 'T' i\nn this case is an object with 'id' and 'name'\n\n‚úÖ","metadata":{"source":"docs\\typescript_typing_guide.txt","loc":{"lines":{"from":132,"to":176}}}}],["8ff4c2f1-3fe1-4cdb-b5f8-2f9755cd9729",{"pageContent":"‚úÖ\n\ndata: { id: 1, name: \"Alice\" }, //\nUser data retrieved successfully\nstatus: 200\n//\nSuccessful HTTP status code\n\n‚úÖ\n\n};\n\nconst errorResponse: ApiResponse<null> = { // 'T' in this case is null\n\n‚ùå No data available\n// ‚ùå Status code indicating 'Not Found'\nerror: \"User not found\" // ‚úÖ Error message\ndata: null,\nstatus: 404,\n\n};\n\n//\n\nEjemplo Pr√°ctico\nCaso de uso: Creaci√≥n de una funci√≥n gen√©rica para manejar respuestas de\nAPI.\n//\n\nüìå Generic interface for API responses\n\ninterface ApiResponse<T> {\ndata: T | null; // Holds the response data or null if there's an error\nstatus: number;\nerror?: string;\n}\n//\n\nüìå Generic function to fetch data from an API\n\nasync function fetchData<T>(url: string): Promise<ApiResponse<T>> {\n\nTypescript typing Guide\n\n5","metadata":{"source":"docs\\typescript_typing_guide.txt","loc":{"lines":{"from":176,"to":220}}}}],["3c5894c2-7688-40c8-88d7-ec19fba38e7f",{"pageContent":"üìå Generic function to fetch data from an API\n\nasync function fetchData<T>(url: string): Promise<ApiResponse<T>> {\n\nTypescript typing Guide\n\n5\n\n\ftry {\nconst response = await fetch(url);\n// Check if the response is not successful\nif (!response.ok) {\nreturn { data: null, status: response.status, error: response.statusTex\nt };\n}\n// Parse and return the JSON response\nconst data: T = await response.json();\nreturn { data, status: response.status };\n} catch (error) {\n// Handle network or unexpected errors\nreturn { data: null, status: 500, error: (error as Error).message };\n}\n}\n\n5. Tipos Especiales: any vs unknown\nDiferencias entre any y unknown\nany: Permite cualquier tipo sin restricciones, deshabilitando la seguridad de\ntipos.\nunknown: Acepta cualquier tipo, pero requiere validaci√≥n antes de su uso.","metadata":{"source":"docs\\typescript_typing_guide.txt","loc":{"lines":{"from":214,"to":242}}}}],["e1b84350-de0d-4e07-8873-b782c516f009",{"pageContent":"Cu√°ndo usar any\nA pesar de que unknown es generalmente m√°s seguro, existen situaciones\nespec√≠ficas donde any puede ser apropiado:\nMigraciones graduales: Cuando se migra c√≥digo JavaScript a TypeScript\nde forma incremental.\nIntegraciones con bibliotecas externas: Al trabajar con bibliotecas sin\ndefiniciones de tipos.\nPrototipos r√°pidos: En fases iniciales de desarrollo donde la prioridad es la\nvelocidad.\n\nTypescript typing Guide\n\n6\n\n\fDatos con estructura impredecible: Al recibir datos cuya estructura puede\nvariar significativamente.\nlet data: any;\ndata = \"Texto\";\ndata = 42;\nlet result: string = data; //\nes en runtime\n\n‚úÖ Se permite sin validaci√≥n, puede causar error\n\nEjemplo con unknown (Recomendado)\nEl tipo unknown debe ser la opci√≥n predeterminada cuando se necesita\nflexibilidad de tipos:\nlet value: unknown;\nvalue = \"Texto\";\nvalue = 42;\nif (typeof value === \"string\") {\nlet str: string = value; //\nSolo se permite tras validaci√≥n\n}\n\n‚úÖ","metadata":{"source":"docs\\typescript_typing_guide.txt","loc":{"lines":{"from":244,"to":279}}}}],["5caeaaeb-c2a6-4000-85cb-cc06c1b44554",{"pageContent":"‚úÖ\n\n6. Tipos Avanzados\nTipos Condicionales\nPermiten evaluar un tipo en tiempo de compilaci√≥n.\ntype IsString<T> = T extends string ? \"Yes\" : \"No\";\ntype Result = IsString<number>; // \"No\"\n\nInferencia de Tipos\nfunction getProperty<T, K extends keyof T>(obj: T, key: K) {\nreturn obj[key];\n}\n\nTypescript typing Guide\n\n7\n\n\fTipos Utilitarios Comunes en TypeScript: Record Omit y\nExclude\nRecord<K, V> : Permite definir un objeto donde las claves (K) tienen un tipo\n\nespec√≠fico y los valores (V) siguen una estructura determinada.\ntype Users = Record<string, { id: number; name: string }>;\nconst users: Users = {\nuser1: { id: 1, name: \"Alice\" },\nuser2: { id: 2, name: \"Bob\" }\n};\nOmit<T, K> :\n\nElimina propiedades espec√≠ficas de un tipo.\n\ntype User = { id: number; name: string; email: string };\ntype UserWithoutEmail = Omit<User, \"email\">;\nExclude<T, U> : Elimina tipos de una uni√≥n.\n\ntype Status = \"active\" | \"inactive\" | \"banned\";\ntype ActiveStatus = Exclude<Status, \"banned\">;","metadata":{"source":"docs\\typescript_typing_guide.txt","loc":{"lines":{"from":279,"to":315}}}}],["27b957a8-de67-4efd-af71-74ab13dbacab",{"pageContent":"type Status = \"active\" | \"inactive\" | \"banned\";\ntype ActiveStatus = Exclude<Status, \"banned\">;\n\nTipos Utilitarios Mapeados\nSe usan para transformar las propiedades de un tipo existente.\n// Ejemplo con geneticos\ntype ReadonlyWrapper<T> = {\nreadonly [K in keyof T]: T[K];\n};\n// Ejemplo con type\ntype User = {\nid: number;\nname: string;\n};\ntype ReadonlyUser = ReadonlyWrapper<User>;\n// Equivalente a:\n\nTypescript typing Guide\n\n8\n\n\f// type ReadonlyUser = { readonly id: number; readonly name: string; }\nconst user: ReadonlyUser = { id: 1, name: \"Juan\" };\nuser.name = \"Pedro\"; //\ndonly\n\n‚ùå Error: No se puede modificar una propiedad rea\n\nReadonly, Partial, Required y Pick\nEstos tipos utilitarios permiten manipular las propiedades de un objeto:\ntype User = {\nid: number;\nname: string;\nemail?: string;\n};\nReadonly<T> : Convierte todas las propiedades en solo lectura.\n\ntype ReadonlyUser = Readonly<User>;\nPartial<T> : Hace que todas las propiedades sean opcionales.","metadata":{"source":"docs\\typescript_typing_guide.txt","loc":{"lines":{"from":314,"to":352}}}}],["9da47ef2-63fc-4e9a-bf38-36d042dfbcba",{"pageContent":"type ReadonlyUser = Readonly<User>;\nPartial<T> : Hace que todas las propiedades sean opcionales.\n\ntype PartialUser = Partial<User>;\nRequired<T> : Hace que todas las propiedades sean requeridas.\n\ntype RequiredUser = Required<User>;\nPick<T, K> : Selecciona propiedades espec√≠ficas de un tipo.\n\ntype UserIdAndName = Pick<User, \"id\" | \"name\">;\nPara ampliar la informacion sobre otros utility types pueden visitar la\ndocumentacion oficial https://www.typescriptlang.org/docs/handbook/utilitytypes.html\n\nTypescript typing Guide\n\n9\n\n\f8. Uso de Enum en TypeScript\nDefinici√≥n de Enum\nUn enum es un tipo especial en TypeScript que permite definir un conjunto de\nconstantes con nombre.\n\nTipos de Enum\nEnum Num√©rico\nPor defecto, los enums asignan valores num√©ricos comenzando desde 0:\nenum Direction {\nUp, // 0\nDown, // 1\nLeft, // 2\nRight // 3\n}\nconsole.log(Direction.Up); // 0\nconsole.log(Direction[0]); // \"Up\" (reverse mapping)","metadata":{"source":"docs\\typescript_typing_guide.txt","loc":{"lines":{"from":351,"to":383}}}}],["a0235b6d-3979-44d2-b774-2a8f93ea96a1",{"pageContent":"Enum con Valores Inicializados\nSe pueden asignar valores espec√≠ficos:\nenum Direction {\nUp = 1,\nDown, // 2\nLeft, // 3\nRight // 4\n}\n\nEnum de Cadenas\nenum UserRole {\nAdmin = \"ADMIN\",\nUser = \"USER\",\nGuest = \"GUEST\"\n\nTypescript typing Guide\n\n10\n\n\f}\n// No hay reverse mapping en enums de cadenas\nconsole.log(UserRole.Admin); // \"ADMIN\"\n\nCaracter√≠stica de Reverse Mapping\nLos enums num√©ricos generan un mapa bidireccional (nombre a valor y valor a\nnombre):\nenum Direction {\nUp = 1,\nDown,\nLeft,\nRight\n}\nconsole.log(Direction[2]); // \"Down\"\nEsto aumenta el tama√±o del c√≥digo generado, ya que se crea un objeto m√°s\ncomplejo.\n\nEnums Const\nLos const enum se eliminan completamente durante la compilaci√≥n,\nreemplazando sus referencias con valores literales, lo que resulta en un c√≥digo\nm√°s eficiente:\nconst enum Direction {\nUp = 1,\nDown,\nLeft,\nRight\n}\nconst dir = Direction.Up; // Se compila a: const dir = 1;\n\nEjemplo Pr√°ctico\n\nTypescript typing Guide\n\n11","metadata":{"source":"docs\\typescript_typing_guide.txt","loc":{"lines":{"from":385,"to":437}}}}],["a92288f6-cb86-41e6-860a-596c59c13f69",{"pageContent":"Ejemplo Pr√°ctico\n\nTypescript typing Guide\n\n11\n\n\fCaso de uso: Definir roles de usuario en una aplicaci√≥n.\nfunction getPermissions(role: UserRole) {\nif (role === UserRole.Admin) {\nreturn \"Full access\";\n}\nreturn \"Limited access\";\n}\n\n9. Enum vs Tipos literales\nUsar enum cuando:\nSe requiere una representaci√≥n en tiempo de ejecuci√≥n\nexiste en JavaScript despu√©s de la compilaci√≥n, lo que permite\nacceder a sus valores en tiempo de ejecuci√≥n.\nenum\n\n√ötil si necesitas valores asignados autom√°ticamente o bidireccionales\n(clave-valor y valor-clave).\nLos valores son usados en m√∫ltiples archivos o m√≥dulos\nSi los valores deben ser reutilizables en varios lugares, los enum pueden\nser m√°s convenientes.\nTrabajas con valores din√°micos\nSi necesitas asignar valores personalizados, como cadenas o n√∫meros\nespec√≠ficos.\n\nEjemplo de enum\nenum UserRole {\nAdmin = \"admin\",\nUser = \"user\",\nGuest = \"guest\"\n}\nfunction getPermissions(role: UserRole) {\nif (role === UserRole.Admin) {\nreturn \"Acceso total\";","metadata":{"source":"docs\\typescript_typing_guide.txt","loc":{"lines":{"from":433,"to":471}}}}],["0099ab53-bc68-41cf-b2bf-94f11eb93f98",{"pageContent":"Ejemplo de enum\nenum UserRole {\nAdmin = \"admin\",\nUser = \"user\",\nGuest = \"guest\"\n}\nfunction getPermissions(role: UserRole) {\nif (role === UserRole.Admin) {\nreturn \"Acceso total\";\n\nTypescript typing Guide\n\n12\n\n\f}\nreturn \"Acceso limitado\";\n}\nconsole.log(getPermissions(UserRole.Admin)); // \"Acceso total\"\n\nUsar type con uniones literales cuando:\nNo se necesita una representaci√≥n en tiempo de ejecuci√≥n\ndesaparece despu√©s de la compilaci√≥n, mejorando el rendimiento\ny reduciendo el tama√±o del c√≥digo.\ntype\n\nSe busca mejor compatibilidad con inferencia de tipos\nTypeScript puede inferir valores m√°s f√°cilmente con uniones literales.\nLos valores no necesitan l√≥gica asociada\nSi solo necesitas definir un conjunto de valores sin m√©todos\nadicionales.","metadata":{"source":"docs\\typescript_typing_guide.txt","loc":{"lines":{"from":463,"to":492}}}}],["44c24da7-b077-4a0f-9bb3-3bdab8f380a3",{"pageContent":"Ejemplo de type con uniones literales\ntype UserRole = \"admin\" | \"user\" | \"guest\";\nfunction getPermissions(role: UserRole) {\nif (role === \"admin\") {\nreturn \"Acceso total\";\n}\nreturn \"Acceso limitado\";\n}\nconsole.log(getPermissions(\"admin\")); // \"Acceso total\"\n\n10. Recursos Adicionales\nhttps://www.typescriptlang.org/docs/handbook/intro.html\n\nTypescript typing Guide\n\n13\n\n\fhttps://docs.aws.amazon.com/prescriptive-guidance/latest/best-practicescdk-typescript-iac/typescript-best-practices.html\nhttps://basarat.gitbook.io/typescript/type-system\nIv√°n Santander\n\nTypescript typing Guide\n\n14\n\n\f\n\n\nGuia Escrita por Ivan Santander","metadata":{"source":"docs\\typescript_typing_guide.txt","loc":{"lines":{"from":494,"to":522}}}}]],{"0":"d5de8e02-986b-4d7c-b2a7-4872e7ef755a","1":"c70a5b72-af05-435f-b21b-92c399307212","2":"11833482-16e1-4ac3-88ed-d6b350640f01","3":"8f86d726-3aba-45bd-9acd-35dc4f5db054","4":"3986514a-92b6-4941-8733-49e3fd48549e","5":"8ff4c2f1-3fe1-4cdb-b5f8-2f9755cd9729","6":"3c5894c2-7688-40c8-88d7-ec19fba38e7f","7":"e1b84350-de0d-4e07-8873-b782c516f009","8":"5caeaaeb-c2a6-4000-85cb-cc06c1b44554","9":"27b957a8-de67-4efd-af71-74ab13dbacab","10":"9da47ef2-63fc-4e9a-bf38-36d042dfbcba","11":"a0235b6d-3979-44d2-b774-2a8f93ea96a1","12":"a92288f6-cb86-41e6-860a-596c59c13f69","13":"0099ab53-bc68-41cf-b2bf-94f11eb93f98","14":"44c24da7-b077-4a0f-9bb3-3bdab8f380a3"}]