[["0",{"pageContent":"Esta documentación detalla los hooks utilizados para el sistema de carga de archivos en la aplicación de gestión de documentos. El sistema utiliza un enfoque modular donde varios hooks trabajan en conjunto para proporcionar una experiencia de carga de archivos robusta y eficiente.\r\n\r\nEstos hooks implementan funcionalidades clave como carga multiparte para archivos grandes, gestión de estado, cola de carga, y acciones de carga (cancelar, eliminar, etc.).\r\n\r\n## 1. useFileUpload\r\n\r\nHook principal que coordina todo el proceso de carga de archivos. Funciona como una fachada para los otros hooks especializados.\r\n\r\n### Descripción\r\n\r\nuseFileUpload es el hook principal que integra las funcionalidades de los otros hooks relacionados con la carga de archivos. Proporciona una interfaz unificada para el componente de carga de archivos y coordina el flujo de trabajo del proceso de carga.\r\n\r\n### Métodos principales","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":1,"to":13}}}}],["1",{"pageContent":"### Métodos principales\r\n\r\n- handleSelectionChange: Procesa archivos seleccionados y los añade a la lista de carga.\r\n- handleUploadAll: Inicia el proceso de carga para todos los archivos pendientes.\r\n- resetUpload: Reinicia el estado de carga y cancela cargas activas.\r\n- cancelUpload: Cancela la carga de un archivo específico.\r\n- cancelAllUploads: Cancela todas las cargas activas.\r\n- deleteUpload: Elimina un archivo ya cargado del sistema.\r\n\r\n### Ejemplo de uso\r\n\r\n```jsx\r\nimport { useFileUpload } from '@/hooks/upload';\r\n\r\nconst FileUploadComponent = () => {\r\n  const {\r\n    uploadItems,\r\n    isUploading,\r\n    handleSelectionChange,\r\n    handleUploadAll,\r\n    cancelUpload,\r\n    cancelAllUploads,\r\n    resetUpload,\r\n    deleteUpload\r\n  } = useFileUpload();\r\n\r\n  const handleFileSelection = (event) => {\r\n    handleSelectionChange(event.target.files);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"file\" onChange={handleFileSelection} multiple />","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":13,"to":45}}}}],["2",{"pageContent":"const handleFileSelection = (event) => {\r\n    handleSelectionChange(event.target.files);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"file\" onChange={handleFileSelection} multiple />\r\n      <button onClick={handleUploadAll}>Subir Archivos</button>\r\n      \r\n      {uploadItems.map(item => (\r\n        <div key={item.id}>\r\n          <span>{item.file.name} - {item.status}</span>\r\n          <progress value={item.progress} max=\"100\" />\r\n          {item.status === 'uploading' && (\r\n            <button onClick={() => cancelUpload(item.id)}>Cancelar</button>\r\n          )}\r\n          {item.status === 'completed' && (\r\n            <button onClick={() => deleteUpload(item.id)}>Eliminar</button>\r\n          )}\r\n        </div>\r\n      ))}\r\n      \r\n      {isUploading && <button onClick={cancelAllUploads}>Cancelar Todo</button>}\r\n      <button onClick={resetUpload}>Reiniciar</button>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n### Flujo de comunicación","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":39,"to":68}}}}],["3",{"pageContent":"{isUploading && <button onClick={cancelAllUploads}>Cancelar Todo</button>}\r\n      <button onClick={resetUpload}>Reiniciar</button>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n### Flujo de comunicación\r\n\r\nuseFileUpload sirve como punto de entrada para los componentes de UI y coordina las interacciones entre los demás hooks:\r\n\r\n- Utiliza useUploadState para gestionar el estado global de la carga.\r\n- Utiliza useUploadQueue para manejar la cola de archivos pendientes.\r\n- Utiliza useMultipartUpload para la carga de archivos grandes en partes.\r\n- Utiliza useUploadActions para las acciones del usuario (cancelar, eliminar, etc.).\r\n\r\nCuando se inicia una carga con handleUploadAll, useFileUpload activa el procesamiento de la cola a través de useUploadQueue, que a su vez utiliza useMultipartUpload para cada archivo. El progreso y estado se actualiza usando funciones de useUploadState.\r\n\r\n## 2. useUploadState\r\n\r\nHook que gestiona el estado global del sistema de carga de archivos.\r\n\r\n### Descripción","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":61,"to":83}}}}],["4",{"pageContent":"## 2. useUploadState\r\n\r\nHook que gestiona el estado global del sistema de carga de archivos.\r\n\r\n### Descripción\r\n\r\nuseUploadState es responsable de manejar el estado central para todo el proceso de carga. Utiliza átomos de Jotai para compartir el estado entre componentes y proporciona funciones de utilidad para actualizar y gestionar este estado.\r\n\r\n### Estado principal\r\n\r\n- uploadItems: Array de elementos que se están cargando, con información como nombre, progreso, estado, etc.\r\n- isUploading: Indica si hay cargas en proceso.\r\n- allUploadsCompleted: Indica si todas las cargas han finalizado (exitosas o no).\r\n- overallProgress: Progreso general de todas las cargas.\r\n- Referencias importantes (activeUploadsRef, processingQueueRef, cancelUploadInProgressRef).\r\n\r\n### Métodos principales\r\n\r\n- updateProgress: Actualiza el progreso y estado de un archivo específico.\r\n- updateOverallProgress: Recalcula el progreso general de todas las cargas.","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":79,"to":98}}}}],["5",{"pageContent":"### Métodos principales\r\n\r\n- updateProgress: Actualiza el progreso y estado de un archivo específico.\r\n- updateOverallProgress: Recalcula el progreso general de todas las cargas.\r\n- resetUploadState: Reinicia todo el estado de carga a sus valores iniciales.\r\n- getUploadSummary: Obtiene un resumen de las cargas (completadas, fallidas, canceladas).\r\n- showUploadSummary: Genera un mensaje de resumen legible.\r\n- formatFileSize: Utilidad para formatear tamaños de archivo en unidades legibles (KB, MB).\r\n\r\n### Ejemplo de uso\r\n\r\n```jsx\r\nimport { useUploadState } from '@/hooks/upload';\r\n\r\nconst UploadStateComponent = () => {\r\n  const {\r\n    uploadItems,\r\n    isUploading,\r\n    overallProgress,\r\n    updateProgress,\r\n    resetUploadState,\r\n    getUploadSummary,\r\n    showUploadSummary,\r\n    formatFileSize\r\n  } = useUploadState();\r\n\r\n  // Mostrar progreso total\r\n  const renderProgress = () => (\r\n    <div>\r\n      <progress value={overallProgress} max=\"100\" />","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":95,"to":124}}}}],["6",{"pageContent":"showUploadSummary,\r\n    formatFileSize\r\n  } = useUploadState();\r\n\r\n  // Mostrar progreso total\r\n  const renderProgress = () => (\r\n    <div>\r\n      <progress value={overallProgress} max=\"100\" />\r\n      <span>{overallProgress}%</span>\r\n    </div>\r\n  );\r\n\r\n  // Mostrar resumen al finalizar\r\n  const renderSummary = () => {\r\n    const { completed, failed, cancelled, total } = getUploadSummary();\r\n    return (\r\n      <div>\r\n        <p>Resumen: {showUploadSummary()}</p>\r\n        <p>Completadas: {completed}/{total}</p>\r\n        <p>Fallidas: {failed}/{total}</p>\r\n        <p>Canceladas: {cancelled}/{total}</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isUploading ? renderProgress() : renderSummary()}\r\n      <button onClick={resetUploadState}>Limpiar</button>\r\n      \r\n      {/* Lista de archivos */}\r\n      <ul>\r\n        {uploadItems.map(item => (\r\n          <li key={item.id}>\r\n            {item.file.name} - {formatFileSize(item.file.size)} - {item.status}\r\n          </li>","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":117,"to":152}}}}],["7",{"pageContent":"<ul>\r\n        {uploadItems.map(item => (\r\n          <li key={item.id}>\r\n            {item.file.name} - {formatFileSize(item.file.size)} - {item.status}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n### Flujo de comunicación\r\n\r\nuseUploadState es el hub central de estado para todo el sistema de carga:\r\n\r\n- Proporciona el estado a useFileUpload, que lo expone a los componentes de UI.\r\n- Recibe actualizaciones de progreso desde useMultipartUpload cuando se está cargando un archivo.\r\n- useUploadActions utiliza sus métodos para actualizar el estado cuando se realizan acciones como cancelar o eliminar.\r\n- useUploadQueue consulta su estado para determinar qué archivos deben cargarse a continuación.","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":148,"to":167}}}}],["8",{"pageContent":"- useUploadQueue consulta su estado para determinar qué archivos deben cargarse a continuación.\r\n\r\nEl método updateProgress es especialmente importante, ya que es llamado frecuentemente durante la carga y mantiene sincronizado el estado general con el progreso real de cada archivo. Implementa optimizaciones para evitar actualizaciones de estado innecesarias cuando los cambios de progreso son muy pequeños.\r\n\r\n## 3. useUploadQueue\r\n\r\nHook que gestiona la cola de carga de archivos y controla el procesamiento secuencial.\r\n\r\n### Descripción\r\n\r\nuseUploadQueue es responsable de gestionar la cola de archivos pendientes de carga. Se asegura de que los archivos se carguen de manera ordenada y controlada, evitando sobrecargar el sistema con demasiadas cargas simultáneas.\r\n\r\n### Métodos principales\r\n\r\n- processUploadQueue: Procesa la cola de carga, iniciando la carga para los archivos pendientes.\r\n- checkAndProcessQueue: Verifica si hay archivos pendientes y, en caso afirmativo, procesa la cola.","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":167,"to":182}}}}],["9",{"pageContent":"- processUploadQueue: Procesa la cola de carga, iniciando la carga para los archivos pendientes.\r\n- checkAndProcessQueue: Verifica si hay archivos pendientes y, en caso afirmativo, procesa la cola.\r\n\r\n### Ejemplo de uso\r\n\r\n```jsx\r\nimport { useUploadQueue } from '@/hooks/upload';\r\n\r\nconst UploadQueueHandler = ({ uploadItems, isUploading, setIsUploading, ... }) => {\r\n  const { checkAndProcessQueue, processUploadQueue } = useUploadQueue(\r\n    uploadItems,\r\n    isUploading,\r\n    setIsUploading,\r\n    cancelUploadInProgressRef,\r\n    setProcessingQueue,\r\n    isProcessingQueue,\r\n    uploadItemProcessor\r\n  );\r\n\r\n  // Iniciar el procesamiento de la cola\r\n  const startUpload = async () => {\r\n    if (uploadItems.length > 0 && !isUploading) {\r\n      setIsUploading(true);\r\n      await processUploadQueue();\r\n    }\r\n  };\r\n\r\n  // Este efecto se asegura de que la cola se procese cuando hay elementos\r\n  useEffect(() => {\r\n    if (isUploading) {\r\n      checkAndProcessQueue();\r\n    }","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":181,"to":212}}}}],["10",{"pageContent":"}\r\n  };\r\n\r\n  // Este efecto se asegura de que la cola se procese cuando hay elementos\r\n  useEffect(() => {\r\n    if (isUploading) {\r\n      checkAndProcessQueue();\r\n    }\r\n  }, [isUploading, uploadItems]);\r\n\r\n  return (\r\n    <button onClick={startUpload} disabled={isUploading || uploadItems.length === 0}>\r\n      Iniciar carga\r\n    </button>\r\n  );\r\n};\r\n```\r\n\r\n### Flujo de comunicación\r\n\r\nuseUploadQueue coordina el proceso de carga de la siguiente manera:\r\n\r\n- useFileUpload inicia el proceso llamando a processUploadQueue.\r\n- processUploadQueue busca en el estado (proporcionado por useUploadState) elementos con status='pending'.\r\n- Para cada archivo pendiente, llama a la función uploadItemProcessor (que normalmente es una referencia a la función uploadMultipart de useMultipartUpload).\r\n- Cuando se completa una carga (o se cancela), useUploadQueue es notificado mediante checkAndProcessQueue, lo que permite iniciar la carga del siguiente archivo.","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":205,"to":230}}}}],["11",{"pageContent":"- Cuando se completa una carga (o se cancela), useUploadQueue es notificado mediante checkAndProcessQueue, lo que permite iniciar la carga del siguiente archivo.\r\n\r\nEl hook implementa mecanismos de control como isProcessingQueue para evitar que múltiples procesos intenten cargar los mismos archivos simultáneamente, y cancela las cargas futuras cuando cancelUploadInProgressRef es true.\r\n\r\n## 4. useUploadActions\r\n\r\nHook para gestionar las acciones del usuario relacionadas con la carga de archivos.\r\n\r\n### Descripción\r\n\r\nuseUploadActions provee funciones para realizar acciones sobre los elementos de carga, como cancelar una carga, cancelar todas las cargas, eliminar un archivo cargado o reiniciar el estado de carga.\r\n\r\n### Métodos principales\r\n\r\n- cancelUpload: Cancela la carga de un archivo específico.\r\n- cancelAllUploads: Cancela todas las cargas activas.\r\n- resetUpload: Reinicia el estado de carga y cancela cargas activas.","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":230,"to":246}}}}],["12",{"pageContent":"- cancelUpload: Cancela la carga de un archivo específico.\r\n- cancelAllUploads: Cancela todas las cargas activas.\r\n- resetUpload: Reinicia el estado de carga y cancela cargas activas.\r\n- deleteUpload: Elimina un archivo ya cargado del sistema mediante una mutación GraphQL.\r\n\r\n### Ejemplo de uso\r\n\r\n```jsx\r\nimport { useUploadActions } from '@/hooks/upload';\r\n\r\nconst UploadActions = ({ uploadItems, setUploadItems, ... }) => {\r\n  const { resetUpload, cancelUpload, cancelAllUploads, deleteUpload } = useUploadActions(\r\n    uploadItems,\r\n    setUploadItems,\r\n    setIsUploading,\r\n    getActiveUploadsRef,\r\n    setActiveUploadsRef,\r\n    getCancelAllInProgressRef,\r\n    setCancelUploadInProgressRef,\r\n    updateOverallProgress,\r\n    resetUploadState,\r\n    checkAndProcessQueue\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {uploadItems.map(item => (\r\n        <div key={item.id}>\r\n          <span>{item.file.name}</span>\r\n          <progress value={item.progress} max=\"100\" />","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":244,"to":273}}}}],["13",{"pageContent":"return (\r\n    <div>\r\n      {uploadItems.map(item => (\r\n        <div key={item.id}>\r\n          <span>{item.file.name}</span>\r\n          <progress value={item.progress} max=\"100\" />\r\n          \r\n          {item.status === 'uploading' && (\r\n            <button onClick={() => cancelUpload(item.id)}>Cancelar</button>\r\n          )}\r\n          \r\n          {item.status === 'completed' && (\r\n            <button onClick={() => deleteUpload(item.id)}>Eliminar</button>\r\n          )}\r\n        </div>\r\n      ))}\r\n      \r\n      {uploadItems.length > 0 && (\r\n        <>\r\n          <button onClick={cancelAllUploads}>Cancelar Todo</button>\r\n          <button onClick={resetUpload}>Reiniciar</button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n### Flujo de comunicación\r\n\r\nuseUploadActions interactúa con varios componentes del sistema de carga:\r\n\r\n- Recibe las referencias al estado y funciones de otros hooks (useUploadState, useUploadQueue).","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":268,"to":300}}}}],["14",{"pageContent":"useUploadActions interactúa con varios componentes del sistema de carga:\r\n\r\n- Recibe las referencias al estado y funciones de otros hooks (useUploadState, useUploadQueue).\r\n- Cuando se cancela una carga, marca el elemento en el estado y aborta cualquier solicitud XMLHttpRequest asociada.\r\n- Para cargas multiparte, cancela todos los XMLHttpRequest en el array multipartXhrs del elemento.\r\n- El método deleteUpload utiliza useMutations para ejecutar una mutación GraphQL DELETE_DOCUMENT_DMS.\r\n- Después de cancelar cargas, notifica a useUploadQueue mediante checkAndProcessQueue para continuar con otros archivos pendientes.\r\n\r\nuseUploadActions maneja diferentes estados de cancelación: una carga en proceso requiere abortar las solicitudes HTTP, mientras que una carga pendiente simplemente se marca como 'cancelled'.\r\n\r\n## 5. useMultipartUpload\r\n\r\nHook especializado en gestionar la carga de archivos grandes mediante la técnica de carga multiparte a S3.\r\n\r\n### Descripción","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":298,"to":312}}}}],["15",{"pageContent":"## 5. useMultipartUpload\r\n\r\nHook especializado en gestionar la carga de archivos grandes mediante la técnica de carga multiparte a S3.\r\n\r\n### Descripción\r\n\r\nuseMultipartUpload implementa el proceso de carga multiparte a Amazon S3, permitiendo cargar archivos grandes dividiéndolos en partes que se cargan en paralelo. Maneja la inicialización de la carga, la creación de URLs prefirmadas, la carga de partes y la finalización del proceso.\r\n\r\n### Métodos principales\r\n\r\n- uploadMultipart: Método principal que gestiona todo el proceso de carga multiparte.\r\n- generateFilePath: Genera la ruta del archivo en el almacenamiento basado en la ubicación actual.\r\n- initializeUpload: Inicializa la carga multiparte con el servidor.\r\n- uploadPart: Carga una parte individual del archivo.\r\n- processChunk: Procesa un grupo de partes simultáneamente.\r\n- processChunksSequentially: Procesa todos los grupos de partes en secuencia.\r\n- completeUpload: Finaliza el proceso de carga multiparte.","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":308,"to":324}}}}],["16",{"pageContent":"- processChunksSequentially: Procesa todos los grupos de partes en secuencia.\r\n- completeUpload: Finaliza el proceso de carga multiparte.\r\n\r\n### Ejemplo de uso\r\n\r\n```jsx\r\nimport { useMultipartUpload } from '@/hooks/upload';\r\n\r\nconst MultipartUploadComponent = () => {\r\n  const { uploadMultipart } = useMultipartUpload();\r\n  const [file, setFile] = useState<File | null>(null);\r\n  const [progress, setProgress] = useState(0);\r\n  const [status, setStatus] = useState('idle');\r\n  const activeUploadsRef = useRef(0);\r\n  const cancelRef = useRef(false);\r\n  \r\n  const handleFileChange = (event) => {\r\n    if (event.target.files && event.target.files[0]) {\r\n      setFile(event.target.files[0]);\r\n    }\r\n  };\r\n  \r\n  const handleUpload = async () => {\r\n    if (!file) return;\r\n    \r\n    const uploadItem = {\r\n      id: 'unique-id',\r\n      file: file,\r\n      progress: 0,\r\n      status: 'pending' as const\r\n    };\r\n    \r\n    setStatus('uploading');\r\n    \r\n    try {\r\n      await uploadMultipart(","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":323,"to":358}}}}],["17",{"pageContent":"id: 'unique-id',\r\n      file: file,\r\n      progress: 0,\r\n      status: 'pending' as const\r\n    };\r\n    \r\n    setStatus('uploading');\r\n    \r\n    try {\r\n      await uploadMultipart(\r\n        uploadItem,\r\n        '/documents', // pathname\r\n        (id, progress, status) => {\r\n          setProgress(progress);\r\n          setStatus(status);\r\n        },\r\n        activeUploadsRef,\r\n        cancelRef,\r\n        () => {}\r\n      );\r\n    } catch (error) {\r\n      console.error('Upload failed:', error);\r\n      setStatus('error');\r\n    }\r\n  };\r\n  \r\n  const handleCancel = () => {\r\n    cancelRef.current = true;\r\n    setStatus('cancelling');\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n      <input type=\"file\" onChange={handleFileChange} />\r\n      <button onClick={handleUpload} disabled={!file || status === 'uploading'}>Upload</button>\r\n      {status === 'uploading' && (\r\n        <>\r\n          <progress value={progress} max=\"100\" />\r\n          <button onClick={handleCancel}>Cancel</button>\r\n        </>","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":349,"to":388}}}}],["18",{"pageContent":"{status === 'uploading' && (\r\n        <>\r\n          <progress value={progress} max=\"100\" />\r\n          <button onClick={handleCancel}>Cancel</button>\r\n        </>\r\n      )}\r\n      <div>Status: {status}</div>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n### Flujo de comunicación\r\n\r\nuseMultipartUpload se comunica principalmente con servicios externos y utiliza callbacks para informar del progreso:\r\n\r\n- Interactúa con la API del backend (endpoints como /api/start-multipart-upload, /api/generate-presigned-url y /api/complete-multipart-upload).\r\n- Utiliza XMLHttpRequest para cargar cada parte a Amazon S3 usando URLs prefirmadas.\r\n- Reporta el progreso a través de la función updateProgress proporcionada por useUploadState.\r\n- Consulta y modifica las referencias (activeUploadsRef, cancelUploadInProgressRef) para coordinar con otros hooks.\r\n- Notifica a useUploadQueue mediante checkAndProcessQueue cuando finaliza una carga.","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":384,"to":404}}}}],["19",{"pageContent":"- Notifica a useUploadQueue mediante checkAndProcessQueue cuando finaliza una carga.\r\n\r\nEl hook está diseñado para manejar archivos grandes de manera eficiente, dividiendo el archivo en partes de 25MB y procesando múltiples partes simultáneamente para optimizar la velocidad de carga, mientras mantiene un control preciso sobre el progreso y proporciona soporte para cancelación.\r\n\r\n## Diagrama de flujo de comunicación entre hooks\r\n\r\nLa interacción entre los cinco hooks sigue este flujo general:\r\n\r\n- useFileUpload es la interfaz principal para los componentes de UI.\r\n- useUploadState gestiona el estado central de todo el sistema.\r\n- useUploadQueue controla qué archivos se cargan y cuándo.\r\n- useMultipartUpload implementa la lógica de carga real de archivos grandes.\r\n- useUploadActions proporciona funciones para las acciones del usuario.\r\n\r\nCuando el usuario inicia una carga:\r\n\r\n- 1. useFileUpload llama a handleUploadAll\r\n- 2. handleUploadAll activa useUploadQueue.processUploadQueue","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":404,"to":421}}}}],["20",{"pageContent":"Cuando el usuario inicia una carga:\r\n\r\n- 1. useFileUpload llama a handleUploadAll\r\n- 2. handleUploadAll activa useUploadQueue.processUploadQueue\r\n- 3. useUploadQueue encuentra archivos pendientes y llama a useMultipartUpload.uploadMultipart para cada uno\r\n- 4. useMultipartUpload inicia la carga y reporta el progreso a useUploadState.updateProgress\r\n- 5. useUploadState actualiza el estado y notifica a la UI\r\n\r\nCuando se cancela o completa una carga, useMultipartUpload notifica a useUploadQueue, que puede seguir procesando más archivos de la cola. useUploadActions permite al usuario interactuar con el sistema en cualquier momento para cancelar, eliminar o reiniciar la carga.","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":418,"to":426}}}}],["21",{"pageContent":"Esta documentación detalla los hooks utilizados para el sistema de carga de archivos en la aplicación de gestión de documentos. El sistema utiliza un enfoque modular donde varios hooks trabajan en conjunto para proporcionar una experiencia de carga de archivos robusta y eficiente.\r\n\r\nEstos hooks implementan funcionalidades clave como carga multiparte para archivos grandes, gestión de estado, cola de carga, y acciones de carga (cancelar, eliminar, etc.).\r\n\r\n## 1. useFileUpload\r\n\r\nHook principal que coordina todo el proceso de carga de archivos. Funciona como una fachada para los otros hooks especializados.\r\n\r\n### Descripción\r\n\r\nuseFileUpload es el hook principal que integra las funcionalidades de los otros hooks relacionados con la carga de archivos. Proporciona una interfaz unificada para el componente de carga de archivos y coordina el flujo de trabajo del proceso de carga.\r\n\r\n### Métodos principales","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":1,"to":13}}}}],["22",{"pageContent":"### Métodos principales\r\n\r\n- handleSelectionChange: Procesa archivos seleccionados y los añade a la lista de carga.\r\n- handleUploadAll: Inicia el proceso de carga para todos los archivos pendientes.\r\n- resetUpload: Reinicia el estado de carga y cancela cargas activas.\r\n- cancelUpload: Cancela la carga de un archivo específico.\r\n- cancelAllUploads: Cancela todas las cargas activas.\r\n- deleteUpload: Elimina un archivo ya cargado del sistema.\r\n\r\n### Ejemplo de uso\r\n\r\n```jsx\r\nimport { useFileUpload } from '@/hooks/upload';\r\n\r\nconst FileUploadComponent = () => {\r\n  const {\r\n    uploadItems,\r\n    isUploading,\r\n    handleSelectionChange,\r\n    handleUploadAll,\r\n    cancelUpload,\r\n    cancelAllUploads,\r\n    resetUpload,\r\n    deleteUpload\r\n  } = useFileUpload();\r\n\r\n  const handleFileSelection = (event) => {\r\n    handleSelectionChange(event.target.files);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"file\" onChange={handleFileSelection} multiple />","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":13,"to":45}}}}],["23",{"pageContent":"const handleFileSelection = (event) => {\r\n    handleSelectionChange(event.target.files);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"file\" onChange={handleFileSelection} multiple />\r\n      <button onClick={handleUploadAll}>Subir Archivos</button>\r\n      \r\n      {uploadItems.map(item => (\r\n        <div key={item.id}>\r\n          <span>{item.file.name} - {item.status}</span>\r\n          <progress value={item.progress} max=\"100\" />\r\n          {item.status === 'uploading' && (\r\n            <button onClick={() => cancelUpload(item.id)}>Cancelar</button>\r\n          )}\r\n          {item.status === 'completed' && (\r\n            <button onClick={() => deleteUpload(item.id)}>Eliminar</button>\r\n          )}\r\n        </div>\r\n      ))}\r\n      \r\n      {isUploading && <button onClick={cancelAllUploads}>Cancelar Todo</button>}\r\n      <button onClick={resetUpload}>Reiniciar</button>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n### Flujo de comunicación","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":39,"to":68}}}}],["24",{"pageContent":"{isUploading && <button onClick={cancelAllUploads}>Cancelar Todo</button>}\r\n      <button onClick={resetUpload}>Reiniciar</button>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n### Flujo de comunicación\r\n\r\nuseFileUpload sirve como punto de entrada para los componentes de UI y coordina las interacciones entre los demás hooks:\r\n\r\n- Utiliza useUploadState para gestionar el estado global de la carga.\r\n- Utiliza useUploadQueue para manejar la cola de archivos pendientes.\r\n- Utiliza useMultipartUpload para la carga de archivos grandes en partes.\r\n- Utiliza useUploadActions para las acciones del usuario (cancelar, eliminar, etc.).\r\n\r\nCuando se inicia una carga con handleUploadAll, useFileUpload activa el procesamiento de la cola a través de useUploadQueue, que a su vez utiliza useMultipartUpload para cada archivo. El progreso y estado se actualiza usando funciones de useUploadState.\r\n\r\n## 2. useUploadState\r\n\r\nHook que gestiona el estado global del sistema de carga de archivos.\r\n\r\n### Descripción","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":61,"to":83}}}}],["25",{"pageContent":"## 2. useUploadState\r\n\r\nHook que gestiona el estado global del sistema de carga de archivos.\r\n\r\n### Descripción\r\n\r\nuseUploadState es responsable de manejar el estado central para todo el proceso de carga. Utiliza átomos de Jotai para compartir el estado entre componentes y proporciona funciones de utilidad para actualizar y gestionar este estado.\r\n\r\n### Estado principal\r\n\r\n- uploadItems: Array de elementos que se están cargando, con información como nombre, progreso, estado, etc.\r\n- isUploading: Indica si hay cargas en proceso.\r\n- allUploadsCompleted: Indica si todas las cargas han finalizado (exitosas o no).\r\n- overallProgress: Progreso general de todas las cargas.\r\n- Referencias importantes (activeUploadsRef, processingQueueRef, cancelUploadInProgressRef).\r\n\r\n### Métodos principales\r\n\r\n- updateProgress: Actualiza el progreso y estado de un archivo específico.\r\n- updateOverallProgress: Recalcula el progreso general de todas las cargas.","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":79,"to":98}}}}],["26",{"pageContent":"### Métodos principales\r\n\r\n- updateProgress: Actualiza el progreso y estado de un archivo específico.\r\n- updateOverallProgress: Recalcula el progreso general de todas las cargas.\r\n- resetUploadState: Reinicia todo el estado de carga a sus valores iniciales.\r\n- getUploadSummary: Obtiene un resumen de las cargas (completadas, fallidas, canceladas).\r\n- showUploadSummary: Genera un mensaje de resumen legible.\r\n- formatFileSize: Utilidad para formatear tamaños de archivo en unidades legibles (KB, MB).\r\n\r\n### Ejemplo de uso\r\n\r\n```jsx\r\nimport { useUploadState } from '@/hooks/upload';\r\n\r\nconst UploadStateComponent = () => {\r\n  const {\r\n    uploadItems,\r\n    isUploading,\r\n    overallProgress,\r\n    updateProgress,\r\n    resetUploadState,\r\n    getUploadSummary,\r\n    showUploadSummary,\r\n    formatFileSize\r\n  } = useUploadState();\r\n\r\n  // Mostrar progreso total\r\n  const renderProgress = () => (\r\n    <div>\r\n      <progress value={overallProgress} max=\"100\" />","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":95,"to":124}}}}],["27",{"pageContent":"showUploadSummary,\r\n    formatFileSize\r\n  } = useUploadState();\r\n\r\n  // Mostrar progreso total\r\n  const renderProgress = () => (\r\n    <div>\r\n      <progress value={overallProgress} max=\"100\" />\r\n      <span>{overallProgress}%</span>\r\n    </div>\r\n  );\r\n\r\n  // Mostrar resumen al finalizar\r\n  const renderSummary = () => {\r\n    const { completed, failed, cancelled, total } = getUploadSummary();\r\n    return (\r\n      <div>\r\n        <p>Resumen: {showUploadSummary()}</p>\r\n        <p>Completadas: {completed}/{total}</p>\r\n        <p>Fallidas: {failed}/{total}</p>\r\n        <p>Canceladas: {cancelled}/{total}</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isUploading ? renderProgress() : renderSummary()}\r\n      <button onClick={resetUploadState}>Limpiar</button>\r\n      \r\n      {/* Lista de archivos */}\r\n      <ul>\r\n        {uploadItems.map(item => (\r\n          <li key={item.id}>\r\n            {item.file.name} - {formatFileSize(item.file.size)} - {item.status}\r\n          </li>","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":117,"to":152}}}}],["28",{"pageContent":"<ul>\r\n        {uploadItems.map(item => (\r\n          <li key={item.id}>\r\n            {item.file.name} - {formatFileSize(item.file.size)} - {item.status}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n### Flujo de comunicación\r\n\r\nuseUploadState es el hub central de estado para todo el sistema de carga:\r\n\r\n- Proporciona el estado a useFileUpload, que lo expone a los componentes de UI.\r\n- Recibe actualizaciones de progreso desde useMultipartUpload cuando se está cargando un archivo.\r\n- useUploadActions utiliza sus métodos para actualizar el estado cuando se realizan acciones como cancelar o eliminar.\r\n- useUploadQueue consulta su estado para determinar qué archivos deben cargarse a continuación.","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":148,"to":167}}}}],["29",{"pageContent":"- useUploadQueue consulta su estado para determinar qué archivos deben cargarse a continuación.\r\n\r\nEl método updateProgress es especialmente importante, ya que es llamado frecuentemente durante la carga y mantiene sincronizado el estado general con el progreso real de cada archivo. Implementa optimizaciones para evitar actualizaciones de estado innecesarias cuando los cambios de progreso son muy pequeños.\r\n\r\n## 3. useUploadQueue\r\n\r\nHook que gestiona la cola de carga de archivos y controla el procesamiento secuencial.\r\n\r\n### Descripción\r\n\r\nuseUploadQueue es responsable de gestionar la cola de archivos pendientes de carga. Se asegura de que los archivos se carguen de manera ordenada y controlada, evitando sobrecargar el sistema con demasiadas cargas simultáneas.\r\n\r\n### Métodos principales\r\n\r\n- processUploadQueue: Procesa la cola de carga, iniciando la carga para los archivos pendientes.\r\n- checkAndProcessQueue: Verifica si hay archivos pendientes y, en caso afirmativo, procesa la cola.","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":167,"to":182}}}}],["30",{"pageContent":"- processUploadQueue: Procesa la cola de carga, iniciando la carga para los archivos pendientes.\r\n- checkAndProcessQueue: Verifica si hay archivos pendientes y, en caso afirmativo, procesa la cola.\r\n\r\n### Ejemplo de uso\r\n\r\n```jsx\r\nimport { useUploadQueue } from '@/hooks/upload';\r\n\r\nconst UploadQueueHandler = ({ uploadItems, isUploading, setIsUploading, ... }) => {\r\n  const { checkAndProcessQueue, processUploadQueue } = useUploadQueue(\r\n    uploadItems,\r\n    isUploading,\r\n    setIsUploading,\r\n    cancelUploadInProgressRef,\r\n    setProcessingQueue,\r\n    isProcessingQueue,\r\n    uploadItemProcessor\r\n  );\r\n\r\n  // Iniciar el procesamiento de la cola\r\n  const startUpload = async () => {\r\n    if (uploadItems.length > 0 && !isUploading) {\r\n      setIsUploading(true);\r\n      await processUploadQueue();\r\n    }\r\n  };\r\n\r\n  // Este efecto se asegura de que la cola se procese cuando hay elementos\r\n  useEffect(() => {\r\n    if (isUploading) {\r\n      checkAndProcessQueue();\r\n    }","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":181,"to":212}}}}],["31",{"pageContent":"}\r\n  };\r\n\r\n  // Este efecto se asegura de que la cola se procese cuando hay elementos\r\n  useEffect(() => {\r\n    if (isUploading) {\r\n      checkAndProcessQueue();\r\n    }\r\n  }, [isUploading, uploadItems]);\r\n\r\n  return (\r\n    <button onClick={startUpload} disabled={isUploading || uploadItems.length === 0}>\r\n      Iniciar carga\r\n    </button>\r\n  );\r\n};\r\n```\r\n\r\n### Flujo de comunicación\r\n\r\nuseUploadQueue coordina el proceso de carga de la siguiente manera:\r\n\r\n- useFileUpload inicia el proceso llamando a processUploadQueue.\r\n- processUploadQueue busca en el estado (proporcionado por useUploadState) elementos con status='pending'.\r\n- Para cada archivo pendiente, llama a la función uploadItemProcessor (que normalmente es una referencia a la función uploadMultipart de useMultipartUpload).\r\n- Cuando se completa una carga (o se cancela), useUploadQueue es notificado mediante checkAndProcessQueue, lo que permite iniciar la carga del siguiente archivo.","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":205,"to":230}}}}],["32",{"pageContent":"- Cuando se completa una carga (o se cancela), useUploadQueue es notificado mediante checkAndProcessQueue, lo que permite iniciar la carga del siguiente archivo.\r\n\r\nEl hook implementa mecanismos de control como isProcessingQueue para evitar que múltiples procesos intenten cargar los mismos archivos simultáneamente, y cancela las cargas futuras cuando cancelUploadInProgressRef es true.\r\n\r\n## 4. useUploadActions\r\n\r\nHook para gestionar las acciones del usuario relacionadas con la carga de archivos.\r\n\r\n### Descripción\r\n\r\nuseUploadActions provee funciones para realizar acciones sobre los elementos de carga, como cancelar una carga, cancelar todas las cargas, eliminar un archivo cargado o reiniciar el estado de carga.\r\n\r\n### Métodos principales\r\n\r\n- cancelUpload: Cancela la carga de un archivo específico.\r\n- cancelAllUploads: Cancela todas las cargas activas.\r\n- resetUpload: Reinicia el estado de carga y cancela cargas activas.","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":230,"to":246}}}}],["33",{"pageContent":"- cancelUpload: Cancela la carga de un archivo específico.\r\n- cancelAllUploads: Cancela todas las cargas activas.\r\n- resetUpload: Reinicia el estado de carga y cancela cargas activas.\r\n- deleteUpload: Elimina un archivo ya cargado del sistema mediante una mutación GraphQL.\r\n\r\n### Ejemplo de uso\r\n\r\n```jsx\r\nimport { useUploadActions } from '@/hooks/upload';\r\n\r\nconst UploadActions = ({ uploadItems, setUploadItems, ... }) => {\r\n  const { resetUpload, cancelUpload, cancelAllUploads, deleteUpload } = useUploadActions(\r\n    uploadItems,\r\n    setUploadItems,\r\n    setIsUploading,\r\n    getActiveUploadsRef,\r\n    setActiveUploadsRef,\r\n    getCancelAllInProgressRef,\r\n    setCancelUploadInProgressRef,\r\n    updateOverallProgress,\r\n    resetUploadState,\r\n    checkAndProcessQueue\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {uploadItems.map(item => (\r\n        <div key={item.id}>\r\n          <span>{item.file.name}</span>\r\n          <progress value={item.progress} max=\"100\" />","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":244,"to":273}}}}],["34",{"pageContent":"return (\r\n    <div>\r\n      {uploadItems.map(item => (\r\n        <div key={item.id}>\r\n          <span>{item.file.name}</span>\r\n          <progress value={item.progress} max=\"100\" />\r\n          \r\n          {item.status === 'uploading' && (\r\n            <button onClick={() => cancelUpload(item.id)}>Cancelar</button>\r\n          )}\r\n          \r\n          {item.status === 'completed' && (\r\n            <button onClick={() => deleteUpload(item.id)}>Eliminar</button>\r\n          )}\r\n        </div>\r\n      ))}\r\n      \r\n      {uploadItems.length > 0 && (\r\n        <>\r\n          <button onClick={cancelAllUploads}>Cancelar Todo</button>\r\n          <button onClick={resetUpload}>Reiniciar</button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n### Flujo de comunicación\r\n\r\nuseUploadActions interactúa con varios componentes del sistema de carga:\r\n\r\n- Recibe las referencias al estado y funciones de otros hooks (useUploadState, useUploadQueue).","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":268,"to":300}}}}],["35",{"pageContent":"useUploadActions interactúa con varios componentes del sistema de carga:\r\n\r\n- Recibe las referencias al estado y funciones de otros hooks (useUploadState, useUploadQueue).\r\n- Cuando se cancela una carga, marca el elemento en el estado y aborta cualquier solicitud XMLHttpRequest asociada.\r\n- Para cargas multiparte, cancela todos los XMLHttpRequest en el array multipartXhrs del elemento.\r\n- El método deleteUpload utiliza useMutations para ejecutar una mutación GraphQL DELETE_DOCUMENT_DMS.\r\n- Después de cancelar cargas, notifica a useUploadQueue mediante checkAndProcessQueue para continuar con otros archivos pendientes.\r\n\r\nuseUploadActions maneja diferentes estados de cancelación: una carga en proceso requiere abortar las solicitudes HTTP, mientras que una carga pendiente simplemente se marca como 'cancelled'.\r\n\r\n## 5. useMultipartUpload\r\n\r\nHook especializado en gestionar la carga de archivos grandes mediante la técnica de carga multiparte a S3.\r\n\r\n### Descripción","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":298,"to":312}}}}],["36",{"pageContent":"## 5. useMultipartUpload\r\n\r\nHook especializado en gestionar la carga de archivos grandes mediante la técnica de carga multiparte a S3.\r\n\r\n### Descripción\r\n\r\nuseMultipartUpload implementa el proceso de carga multiparte a Amazon S3, permitiendo cargar archivos grandes dividiéndolos en partes que se cargan en paralelo. Maneja la inicialización de la carga, la creación de URLs prefirmadas, la carga de partes y la finalización del proceso.\r\n\r\n### Métodos principales\r\n\r\n- uploadMultipart: Método principal que gestiona todo el proceso de carga multiparte.\r\n- generateFilePath: Genera la ruta del archivo en el almacenamiento basado en la ubicación actual.\r\n- initializeUpload: Inicializa la carga multiparte con el servidor.\r\n- uploadPart: Carga una parte individual del archivo.\r\n- processChunk: Procesa un grupo de partes simultáneamente.\r\n- processChunksSequentially: Procesa todos los grupos de partes en secuencia.\r\n- completeUpload: Finaliza el proceso de carga multiparte.","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":308,"to":324}}}}],["37",{"pageContent":"- processChunksSequentially: Procesa todos los grupos de partes en secuencia.\r\n- completeUpload: Finaliza el proceso de carga multiparte.\r\n\r\n### Ejemplo de uso\r\n\r\n```jsx\r\nimport { useMultipartUpload } from '@/hooks/upload';\r\n\r\nconst MultipartUploadComponent = () => {\r\n  const { uploadMultipart } = useMultipartUpload();\r\n  const [file, setFile] = useState<File | null>(null);\r\n  const [progress, setProgress] = useState(0);\r\n  const [status, setStatus] = useState('idle');\r\n  const activeUploadsRef = useRef(0);\r\n  const cancelRef = useRef(false);\r\n  \r\n  const handleFileChange = (event) => {\r\n    if (event.target.files && event.target.files[0]) {\r\n      setFile(event.target.files[0]);\r\n    }\r\n  };\r\n  \r\n  const handleUpload = async () => {\r\n    if (!file) return;\r\n    \r\n    const uploadItem = {\r\n      id: 'unique-id',\r\n      file: file,\r\n      progress: 0,\r\n      status: 'pending' as const\r\n    };\r\n    \r\n    setStatus('uploading');\r\n    \r\n    try {\r\n      await uploadMultipart(","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":323,"to":358}}}}],["38",{"pageContent":"id: 'unique-id',\r\n      file: file,\r\n      progress: 0,\r\n      status: 'pending' as const\r\n    };\r\n    \r\n    setStatus('uploading');\r\n    \r\n    try {\r\n      await uploadMultipart(\r\n        uploadItem,\r\n        '/documents', // pathname\r\n        (id, progress, status) => {\r\n          setProgress(progress);\r\n          setStatus(status);\r\n        },\r\n        activeUploadsRef,\r\n        cancelRef,\r\n        () => {}\r\n      );\r\n    } catch (error) {\r\n      console.error('Upload failed:', error);\r\n      setStatus('error');\r\n    }\r\n  };\r\n  \r\n  const handleCancel = () => {\r\n    cancelRef.current = true;\r\n    setStatus('cancelling');\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n      <input type=\"file\" onChange={handleFileChange} />\r\n      <button onClick={handleUpload} disabled={!file || status === 'uploading'}>Upload</button>\r\n      {status === 'uploading' && (\r\n        <>\r\n          <progress value={progress} max=\"100\" />\r\n          <button onClick={handleCancel}>Cancel</button>\r\n        </>","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":349,"to":388}}}}],["39",{"pageContent":"{status === 'uploading' && (\r\n        <>\r\n          <progress value={progress} max=\"100\" />\r\n          <button onClick={handleCancel}>Cancel</button>\r\n        </>\r\n      )}\r\n      <div>Status: {status}</div>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n### Flujo de comunicación\r\n\r\nuseMultipartUpload se comunica principalmente con servicios externos y utiliza callbacks para informar del progreso:\r\n\r\n- Interactúa con la API del backend (endpoints como /api/start-multipart-upload, /api/generate-presigned-url y /api/complete-multipart-upload).\r\n- Utiliza XMLHttpRequest para cargar cada parte a Amazon S3 usando URLs prefirmadas.\r\n- Reporta el progreso a través de la función updateProgress proporcionada por useUploadState.\r\n- Consulta y modifica las referencias (activeUploadsRef, cancelUploadInProgressRef) para coordinar con otros hooks.\r\n- Notifica a useUploadQueue mediante checkAndProcessQueue cuando finaliza una carga.","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":384,"to":404}}}}],["40",{"pageContent":"- Notifica a useUploadQueue mediante checkAndProcessQueue cuando finaliza una carga.\r\n\r\nEl hook está diseñado para manejar archivos grandes de manera eficiente, dividiendo el archivo en partes de 25MB y procesando múltiples partes simultáneamente para optimizar la velocidad de carga, mientras mantiene un control preciso sobre el progreso y proporciona soporte para cancelación.\r\n\r\n## Diagrama de flujo de comunicación entre hooks\r\n\r\nLa interacción entre los cinco hooks sigue este flujo general:\r\n\r\n- useFileUpload es la interfaz principal para los componentes de UI.\r\n- useUploadState gestiona el estado central de todo el sistema.\r\n- useUploadQueue controla qué archivos se cargan y cuándo.\r\n- useMultipartUpload implementa la lógica de carga real de archivos grandes.\r\n- useUploadActions proporciona funciones para las acciones del usuario.\r\n\r\nCuando el usuario inicia una carga:\r\n\r\n- 1. useFileUpload llama a handleUploadAll\r\n- 2. handleUploadAll activa useUploadQueue.processUploadQueue","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":404,"to":421}}}}],["41",{"pageContent":"Cuando el usuario inicia una carga:\r\n\r\n- 1. useFileUpload llama a handleUploadAll\r\n- 2. handleUploadAll activa useUploadQueue.processUploadQueue\r\n- 3. useUploadQueue encuentra archivos pendientes y llama a useMultipartUpload.uploadMultipart para cada uno\r\n- 4. useMultipartUpload inicia la carga y reporta el progreso a useUploadState.updateProgress\r\n- 5. useUploadState actualiza el estado y notifica a la UI\r\n\r\nCuando se cancela o completa una carga, useMultipartUpload notifica a useUploadQueue, que puede seguir procesando más archivos de la cola. useUploadActions permite al usuario interactuar con el sistema en cualquier momento para cancelar, eliminar o reiniciar la carga.","metadata":{"source":"docs\\documentacion_de_hooks_de_carga_de_archivos.txt","loc":{"lines":{"from":418,"to":426}}}}]]