import swaggerJsdoc from 'swagger-jsdoc';
import swaggerUi from 'swagger-ui-express';

const options: swaggerJsdoc.Options = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'LangChain Document Chat API',
      version: '1.0.0',
      description: 'API for chatting with documents using LangChain and OpenAI',
      contact: {
        name: 'API Support',
        email: 'support@example.com'
      }
    },
    servers: [
      {
        url: 'http://localhost:3000',
        description: 'Development server'
      },
      {
        url: 'https://langchain-api-server-production.up.railway.app',
        description: 'Production server'
      }
    ],
    components: {
      schemas: {
        Error: {
          type: 'object',
          properties: {
            error: {
              type: 'string',
              description: 'Error message'
            }
          }
        },
        Document: {
          type: 'object',
          properties: {
            pageContent: {
              type: 'string',
              description: 'Content of the document page'
            },
            metadata: {
              type: 'object',
              additionalProperties: {
                type: 'string'
              },
              description: 'Document metadata'
            }
          }
        },
        ChatRequest: {
          type: 'object',
          required: ['question'],
          properties: {
            question: {
              type: 'string',
              description: 'Question to ask the chat system'
            },
            vectorStore: {
              type: 'string',
              description: 'Name of the vector store to use (optional, defaults to "combined")'
            },
            userId: {
              type: 'string',
              description: 'User ID'
            },
            chatId: {
              type: 'string',
              description: 'Chat ID'
            },
            modelConfig: {
              $ref: '#/components/schemas/ModelConfig'
            }
          }
        },
        ChatResponse: {
          type: 'object',
          properties: {
            answer: {
              type: 'string',
              description: 'Response generated by the model'
            },
            sourceDocuments: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/Document'
              },
              description: 'Source documents used to generate the response'
            },
            chatId: {
              type: 'string',
              description: 'Chat ID'
            },
            timestamp: {
              type: 'string',
              format: 'date-time',
              description: 'Timestamp of the response'
            }
          }
        },
        ModelConfig: {
          type: 'object',
          properties: {
            modelName: {
              type: 'string',
              description: 'Name of the OpenAI model to use'
            },
            temperature: {
              type: 'number',
              minimum: 0,
              maximum: 2,
              description: 'Model temperature (creativity)'
            },
            maxTokens: {
              type: 'integer',
              minimum: 1,
              description: 'Maximum number of tokens in the response'
            }
          }
        },
        VectorStoresResponse: {
          type: 'object',
          properties: {
            stores: {
              type: 'array',
              items: {
                type: 'string'
              },
              description: 'List of available vector stores'
            },
            default: {
              type: 'string',
              description: 'Default vector store'
            }
          }
        },
        HealthResponse: {
          type: 'object',
          properties: {
            status: {
              type: 'string',
              description: 'Service status'
            },
            timestamp: {
              type: 'string',
              format: 'date-time',
              description: 'Timestamp of the check'
            },
            uptime: {
              type: 'number',
              description: 'Uptime in seconds'
            },
            memory: {
              type: 'object',
              description: 'Memory usage information'
            },
            version: {
              type: 'string',
              description: 'Node.js version'
            },
            vectorStores: {
              type: 'number',
              description: 'Number of available vector stores'
            }
          }
        },
        DocumentUpload: {
          type: 'object',
          required: ['filename', 'content'],
          properties: {
            filename: {
              type: 'string',
              description: 'Name of the file to upload'
            },
            content: {
              type: 'string',
              description: 'Content of the file (text or base64 for PDFs)'
            }
          }
        },
        DocumentUploadResponse: {
          type: 'object',
          properties: {
            message: {
              type: 'string',
              description: 'Confirmation message'
            },
            filename: {
              type: 'string',
              description: 'Name of the processed file'
            },
            chunks: {
              type: 'number',
              description: 'Number of chunks created'
            },
            vectorStores: {
              type: 'array',
              items: {
                type: 'string'
              },
              description: 'Updated vector stores'
            }
          }
        }
      }
    },
    tags: [
      {
        name: 'Health',
        description: 'Health and system status endpoints'
      },
      {
        name: 'Chat',
        description: 'Endpoints related to chat and message processing'
      },
      {
        name: 'Vector Stores',
        description: 'Management of vector stores'
      },
      {
        name: 'Models',
        description: 'Information about available models'
      },
      {
        name: 'Documents',
        description: 'Document management'
      },
      {
        name: 'Users',
        description: 'User management and chat history'
      }
    ]
  },
  apis: ['./src/lib/api.ts'], // Path to the files containing swagger annotations
};

export const specs = swaggerJsdoc(options);
export { swaggerUi }; 